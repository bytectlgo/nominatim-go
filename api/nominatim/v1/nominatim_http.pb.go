// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.9.0
// - protoc             (unknown)
// source: nominatim/v1/nominatim.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationNominatimServiceLookup = "/nominatim.v1.NominatimService/Lookup"
const OperationNominatimServiceReverse = "/nominatim.v1.NominatimService/Reverse"
const OperationNominatimServiceSearch = "/nominatim.v1.NominatimService/Search"
const OperationNominatimServiceStatus = "/nominatim.v1.NominatimService/Status"

type NominatimServiceHTTPServer interface {
	// Lookup 依据 OSM ID 批量查询
	Lookup(context.Context, *LookupRequest) (*LookupResponse, error)
	// Reverse 逆地理编码：经纬度到地点
	Reverse(context.Context, *ReverseRequest) (*ReverseResponse, error)
	// Search 名称/地址/类型搜索
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	// Status 服务状态
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
}

func RegisterNominatimServiceHTTPServer(s *http.Server, srv NominatimServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/search", _NominatimService_Search0_HTTP_Handler(srv))
	r.GET("/reverse", _NominatimService_Reverse0_HTTP_Handler(srv))
	r.GET("/lookup", _NominatimService_Lookup0_HTTP_Handler(srv))
	r.GET("/status", _NominatimService_Status0_HTTP_Handler(srv))
}

func _NominatimService_Search0_HTTP_Handler(srv NominatimServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SearchRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNominatimServiceSearch)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Search(ctx, req.(*SearchRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SearchResponse)
		return ctx.Result(200, reply)
	}
}

func _NominatimService_Reverse0_HTTP_Handler(srv NominatimServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReverseRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNominatimServiceReverse)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Reverse(ctx, req.(*ReverseRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ReverseResponse)
		return ctx.Result(200, reply)
	}
}

func _NominatimService_Lookup0_HTTP_Handler(srv NominatimServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LookupRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNominatimServiceLookup)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Lookup(ctx, req.(*LookupRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LookupResponse)
		return ctx.Result(200, reply)
	}
}

func _NominatimService_Status0_HTTP_Handler(srv NominatimServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in StatusRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNominatimServiceStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Status(ctx, req.(*StatusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*StatusResponse)
		return ctx.Result(200, reply)
	}
}

type NominatimServiceHTTPClient interface {
	// Lookup 依据 OSM ID 批量查询
	Lookup(ctx context.Context, req *LookupRequest, opts ...http.CallOption) (rsp *LookupResponse, err error)
	// Reverse 逆地理编码：经纬度到地点
	Reverse(ctx context.Context, req *ReverseRequest, opts ...http.CallOption) (rsp *ReverseResponse, err error)
	// Search 名称/地址/类型搜索
	Search(ctx context.Context, req *SearchRequest, opts ...http.CallOption) (rsp *SearchResponse, err error)
	// Status 服务状态
	Status(ctx context.Context, req *StatusRequest, opts ...http.CallOption) (rsp *StatusResponse, err error)
}

type NominatimServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewNominatimServiceHTTPClient(client *http.Client) NominatimServiceHTTPClient {
	return &NominatimServiceHTTPClientImpl{client}
}

// Lookup 依据 OSM ID 批量查询
func (c *NominatimServiceHTTPClientImpl) Lookup(ctx context.Context, in *LookupRequest, opts ...http.CallOption) (*LookupResponse, error) {
	var out LookupResponse
	pattern := "/lookup"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNominatimServiceLookup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// Reverse 逆地理编码：经纬度到地点
func (c *NominatimServiceHTTPClientImpl) Reverse(ctx context.Context, in *ReverseRequest, opts ...http.CallOption) (*ReverseResponse, error) {
	var out ReverseResponse
	pattern := "/reverse"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNominatimServiceReverse))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// Search 名称/地址/类型搜索
func (c *NominatimServiceHTTPClientImpl) Search(ctx context.Context, in *SearchRequest, opts ...http.CallOption) (*SearchResponse, error) {
	var out SearchResponse
	pattern := "/search"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNominatimServiceSearch))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// Status 服务状态
func (c *NominatimServiceHTTPClientImpl) Status(ctx context.Context, in *StatusRequest, opts ...http.CallOption) (*StatusResponse, error) {
	var out StatusResponse
	pattern := "/status"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNominatimServiceStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
