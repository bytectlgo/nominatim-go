// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"nominatim-go/ent/addressrow"
	"nominatim-go/ent/place"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AddressRowCreate is the builder for creating a AddressRow entity.
type AddressRowCreate struct {
	config
	mutation *AddressRowMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (_c *AddressRowCreate) SetCreatedAt(v int64) *AddressRowCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *AddressRowCreate) SetNillableCreatedAt(v *int64) *AddressRowCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *AddressRowCreate) SetUpdatedAt(v int64) *AddressRowCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *AddressRowCreate) SetNillableUpdatedAt(v *int64) *AddressRowCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetComponent sets the "component" field.
func (_c *AddressRowCreate) SetComponent(v string) *AddressRowCreate {
	_c.mutation.SetComponent(v)
	return _c
}

// SetName sets the "name" field.
func (_c *AddressRowCreate) SetName(v string) *AddressRowCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetAdminLevel sets the "admin_level" field.
func (_c *AddressRowCreate) SetAdminLevel(v uint32) *AddressRowCreate {
	_c.mutation.SetAdminLevel(v)
	return _c
}

// SetNillableAdminLevel sets the "admin_level" field if the given value is not nil.
func (_c *AddressRowCreate) SetNillableAdminLevel(v *uint32) *AddressRowCreate {
	if v != nil {
		_c.SetAdminLevel(*v)
	}
	return _c
}

// SetRank sets the "rank" field.
func (_c *AddressRowCreate) SetRank(v uint32) *AddressRowCreate {
	_c.mutation.SetRank(v)
	return _c
}

// SetNillableRank sets the "rank" field if the given value is not nil.
func (_c *AddressRowCreate) SetNillableRank(v *uint32) *AddressRowCreate {
	if v != nil {
		_c.SetRank(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *AddressRowCreate) SetID(v int64) *AddressRowCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetPlaceID sets the "place" edge to the Place entity by ID.
func (_c *AddressRowCreate) SetPlaceID(id int) *AddressRowCreate {
	_c.mutation.SetPlaceID(id)
	return _c
}

// SetPlace sets the "place" edge to the Place entity.
func (_c *AddressRowCreate) SetPlace(v *Place) *AddressRowCreate {
	return _c.SetPlaceID(v.ID)
}

// Mutation returns the AddressRowMutation object of the builder.
func (_c *AddressRowCreate) Mutation() *AddressRowMutation {
	return _c.mutation
}

// Save creates the AddressRow in the database.
func (_c *AddressRowCreate) Save(ctx context.Context) (*AddressRow, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *AddressRowCreate) SaveX(ctx context.Context) *AddressRow {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *AddressRowCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *AddressRowCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *AddressRowCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := addressrow.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := addressrow.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Rank(); !ok {
		v := addressrow.DefaultRank
		_c.mutation.SetRank(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *AddressRowCreate) check() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AddressRow.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AddressRow.updated_at"`)}
	}
	if _, ok := _c.mutation.Component(); !ok {
		return &ValidationError{Name: "component", err: errors.New(`ent: missing required field "AddressRow.component"`)}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "AddressRow.name"`)}
	}
	if _, ok := _c.mutation.Rank(); !ok {
		return &ValidationError{Name: "rank", err: errors.New(`ent: missing required field "AddressRow.rank"`)}
	}
	if len(_c.mutation.PlaceIDs()) == 0 {
		return &ValidationError{Name: "place", err: errors.New(`ent: missing required edge "AddressRow.place"`)}
	}
	return nil
}

func (_c *AddressRowCreate) sqlSave(ctx context.Context) (*AddressRow, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *AddressRowCreate) createSpec() (*AddressRow, *sqlgraph.CreateSpec) {
	var (
		_node = &AddressRow{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(addressrow.Table, sqlgraph.NewFieldSpec(addressrow.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(addressrow.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(addressrow.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.Component(); ok {
		_spec.SetField(addressrow.FieldComponent, field.TypeString, value)
		_node.Component = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(addressrow.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.AdminLevel(); ok {
		_spec.SetField(addressrow.FieldAdminLevel, field.TypeUint32, value)
		_node.AdminLevel = value
	}
	if value, ok := _c.mutation.Rank(); ok {
		_spec.SetField(addressrow.FieldRank, field.TypeUint32, value)
		_node.Rank = value
	}
	if nodes := _c.mutation.PlaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   addressrow.PlaceTable,
			Columns: []string{addressrow.PlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.place_address_rows = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AddressRow.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AddressRowUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *AddressRowCreate) OnConflict(opts ...sql.ConflictOption) *AddressRowUpsertOne {
	_c.conflict = opts
	return &AddressRowUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AddressRow.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *AddressRowCreate) OnConflictColumns(columns ...string) *AddressRowUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &AddressRowUpsertOne{
		create: _c,
	}
}

type (
	// AddressRowUpsertOne is the builder for "upsert"-ing
	//  one AddressRow node.
	AddressRowUpsertOne struct {
		create *AddressRowCreate
	}

	// AddressRowUpsert is the "OnConflict" setter.
	AddressRowUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *AddressRowUpsert) SetUpdatedAt(v int64) *AddressRowUpsert {
	u.Set(addressrow.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AddressRowUpsert) UpdateUpdatedAt() *AddressRowUpsert {
	u.SetExcluded(addressrow.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AddressRowUpsert) AddUpdatedAt(v int64) *AddressRowUpsert {
	u.Add(addressrow.FieldUpdatedAt, v)
	return u
}

// SetComponent sets the "component" field.
func (u *AddressRowUpsert) SetComponent(v string) *AddressRowUpsert {
	u.Set(addressrow.FieldComponent, v)
	return u
}

// UpdateComponent sets the "component" field to the value that was provided on create.
func (u *AddressRowUpsert) UpdateComponent() *AddressRowUpsert {
	u.SetExcluded(addressrow.FieldComponent)
	return u
}

// SetName sets the "name" field.
func (u *AddressRowUpsert) SetName(v string) *AddressRowUpsert {
	u.Set(addressrow.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AddressRowUpsert) UpdateName() *AddressRowUpsert {
	u.SetExcluded(addressrow.FieldName)
	return u
}

// SetAdminLevel sets the "admin_level" field.
func (u *AddressRowUpsert) SetAdminLevel(v uint32) *AddressRowUpsert {
	u.Set(addressrow.FieldAdminLevel, v)
	return u
}

// UpdateAdminLevel sets the "admin_level" field to the value that was provided on create.
func (u *AddressRowUpsert) UpdateAdminLevel() *AddressRowUpsert {
	u.SetExcluded(addressrow.FieldAdminLevel)
	return u
}

// AddAdminLevel adds v to the "admin_level" field.
func (u *AddressRowUpsert) AddAdminLevel(v uint32) *AddressRowUpsert {
	u.Add(addressrow.FieldAdminLevel, v)
	return u
}

// ClearAdminLevel clears the value of the "admin_level" field.
func (u *AddressRowUpsert) ClearAdminLevel() *AddressRowUpsert {
	u.SetNull(addressrow.FieldAdminLevel)
	return u
}

// SetRank sets the "rank" field.
func (u *AddressRowUpsert) SetRank(v uint32) *AddressRowUpsert {
	u.Set(addressrow.FieldRank, v)
	return u
}

// UpdateRank sets the "rank" field to the value that was provided on create.
func (u *AddressRowUpsert) UpdateRank() *AddressRowUpsert {
	u.SetExcluded(addressrow.FieldRank)
	return u
}

// AddRank adds v to the "rank" field.
func (u *AddressRowUpsert) AddRank(v uint32) *AddressRowUpsert {
	u.Add(addressrow.FieldRank, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AddressRow.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(addressrow.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AddressRowUpsertOne) UpdateNewValues() *AddressRowUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(addressrow.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(addressrow.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AddressRow.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AddressRowUpsertOne) Ignore() *AddressRowUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AddressRowUpsertOne) DoNothing() *AddressRowUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AddressRowCreate.OnConflict
// documentation for more info.
func (u *AddressRowUpsertOne) Update(set func(*AddressRowUpsert)) *AddressRowUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AddressRowUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AddressRowUpsertOne) SetUpdatedAt(v int64) *AddressRowUpsertOne {
	return u.Update(func(s *AddressRowUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AddressRowUpsertOne) AddUpdatedAt(v int64) *AddressRowUpsertOne {
	return u.Update(func(s *AddressRowUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AddressRowUpsertOne) UpdateUpdatedAt() *AddressRowUpsertOne {
	return u.Update(func(s *AddressRowUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetComponent sets the "component" field.
func (u *AddressRowUpsertOne) SetComponent(v string) *AddressRowUpsertOne {
	return u.Update(func(s *AddressRowUpsert) {
		s.SetComponent(v)
	})
}

// UpdateComponent sets the "component" field to the value that was provided on create.
func (u *AddressRowUpsertOne) UpdateComponent() *AddressRowUpsertOne {
	return u.Update(func(s *AddressRowUpsert) {
		s.UpdateComponent()
	})
}

// SetName sets the "name" field.
func (u *AddressRowUpsertOne) SetName(v string) *AddressRowUpsertOne {
	return u.Update(func(s *AddressRowUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AddressRowUpsertOne) UpdateName() *AddressRowUpsertOne {
	return u.Update(func(s *AddressRowUpsert) {
		s.UpdateName()
	})
}

// SetAdminLevel sets the "admin_level" field.
func (u *AddressRowUpsertOne) SetAdminLevel(v uint32) *AddressRowUpsertOne {
	return u.Update(func(s *AddressRowUpsert) {
		s.SetAdminLevel(v)
	})
}

// AddAdminLevel adds v to the "admin_level" field.
func (u *AddressRowUpsertOne) AddAdminLevel(v uint32) *AddressRowUpsertOne {
	return u.Update(func(s *AddressRowUpsert) {
		s.AddAdminLevel(v)
	})
}

// UpdateAdminLevel sets the "admin_level" field to the value that was provided on create.
func (u *AddressRowUpsertOne) UpdateAdminLevel() *AddressRowUpsertOne {
	return u.Update(func(s *AddressRowUpsert) {
		s.UpdateAdminLevel()
	})
}

// ClearAdminLevel clears the value of the "admin_level" field.
func (u *AddressRowUpsertOne) ClearAdminLevel() *AddressRowUpsertOne {
	return u.Update(func(s *AddressRowUpsert) {
		s.ClearAdminLevel()
	})
}

// SetRank sets the "rank" field.
func (u *AddressRowUpsertOne) SetRank(v uint32) *AddressRowUpsertOne {
	return u.Update(func(s *AddressRowUpsert) {
		s.SetRank(v)
	})
}

// AddRank adds v to the "rank" field.
func (u *AddressRowUpsertOne) AddRank(v uint32) *AddressRowUpsertOne {
	return u.Update(func(s *AddressRowUpsert) {
		s.AddRank(v)
	})
}

// UpdateRank sets the "rank" field to the value that was provided on create.
func (u *AddressRowUpsertOne) UpdateRank() *AddressRowUpsertOne {
	return u.Update(func(s *AddressRowUpsert) {
		s.UpdateRank()
	})
}

// Exec executes the query.
func (u *AddressRowUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AddressRowCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AddressRowUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AddressRowUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AddressRowUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AddressRowCreateBulk is the builder for creating many AddressRow entities in bulk.
type AddressRowCreateBulk struct {
	config
	err      error
	builders []*AddressRowCreate
	conflict []sql.ConflictOption
}

// Save creates the AddressRow entities in the database.
func (_c *AddressRowCreateBulk) Save(ctx context.Context) ([]*AddressRow, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*AddressRow, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AddressRowMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *AddressRowCreateBulk) SaveX(ctx context.Context) []*AddressRow {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *AddressRowCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *AddressRowCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AddressRow.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AddressRowUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *AddressRowCreateBulk) OnConflict(opts ...sql.ConflictOption) *AddressRowUpsertBulk {
	_c.conflict = opts
	return &AddressRowUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AddressRow.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *AddressRowCreateBulk) OnConflictColumns(columns ...string) *AddressRowUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &AddressRowUpsertBulk{
		create: _c,
	}
}

// AddressRowUpsertBulk is the builder for "upsert"-ing
// a bulk of AddressRow nodes.
type AddressRowUpsertBulk struct {
	create *AddressRowCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AddressRow.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(addressrow.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AddressRowUpsertBulk) UpdateNewValues() *AddressRowUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(addressrow.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(addressrow.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AddressRow.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AddressRowUpsertBulk) Ignore() *AddressRowUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AddressRowUpsertBulk) DoNothing() *AddressRowUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AddressRowCreateBulk.OnConflict
// documentation for more info.
func (u *AddressRowUpsertBulk) Update(set func(*AddressRowUpsert)) *AddressRowUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AddressRowUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AddressRowUpsertBulk) SetUpdatedAt(v int64) *AddressRowUpsertBulk {
	return u.Update(func(s *AddressRowUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AddressRowUpsertBulk) AddUpdatedAt(v int64) *AddressRowUpsertBulk {
	return u.Update(func(s *AddressRowUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AddressRowUpsertBulk) UpdateUpdatedAt() *AddressRowUpsertBulk {
	return u.Update(func(s *AddressRowUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetComponent sets the "component" field.
func (u *AddressRowUpsertBulk) SetComponent(v string) *AddressRowUpsertBulk {
	return u.Update(func(s *AddressRowUpsert) {
		s.SetComponent(v)
	})
}

// UpdateComponent sets the "component" field to the value that was provided on create.
func (u *AddressRowUpsertBulk) UpdateComponent() *AddressRowUpsertBulk {
	return u.Update(func(s *AddressRowUpsert) {
		s.UpdateComponent()
	})
}

// SetName sets the "name" field.
func (u *AddressRowUpsertBulk) SetName(v string) *AddressRowUpsertBulk {
	return u.Update(func(s *AddressRowUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AddressRowUpsertBulk) UpdateName() *AddressRowUpsertBulk {
	return u.Update(func(s *AddressRowUpsert) {
		s.UpdateName()
	})
}

// SetAdminLevel sets the "admin_level" field.
func (u *AddressRowUpsertBulk) SetAdminLevel(v uint32) *AddressRowUpsertBulk {
	return u.Update(func(s *AddressRowUpsert) {
		s.SetAdminLevel(v)
	})
}

// AddAdminLevel adds v to the "admin_level" field.
func (u *AddressRowUpsertBulk) AddAdminLevel(v uint32) *AddressRowUpsertBulk {
	return u.Update(func(s *AddressRowUpsert) {
		s.AddAdminLevel(v)
	})
}

// UpdateAdminLevel sets the "admin_level" field to the value that was provided on create.
func (u *AddressRowUpsertBulk) UpdateAdminLevel() *AddressRowUpsertBulk {
	return u.Update(func(s *AddressRowUpsert) {
		s.UpdateAdminLevel()
	})
}

// ClearAdminLevel clears the value of the "admin_level" field.
func (u *AddressRowUpsertBulk) ClearAdminLevel() *AddressRowUpsertBulk {
	return u.Update(func(s *AddressRowUpsert) {
		s.ClearAdminLevel()
	})
}

// SetRank sets the "rank" field.
func (u *AddressRowUpsertBulk) SetRank(v uint32) *AddressRowUpsertBulk {
	return u.Update(func(s *AddressRowUpsert) {
		s.SetRank(v)
	})
}

// AddRank adds v to the "rank" field.
func (u *AddressRowUpsertBulk) AddRank(v uint32) *AddressRowUpsertBulk {
	return u.Update(func(s *AddressRowUpsert) {
		s.AddRank(v)
	})
}

// UpdateRank sets the "rank" field to the value that was provided on create.
func (u *AddressRowUpsertBulk) UpdateRank() *AddressRowUpsertBulk {
	return u.Update(func(s *AddressRowUpsert) {
		s.UpdateRank()
	})
}

// Exec executes the query.
func (u *AddressRowUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AddressRowCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AddressRowCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AddressRowUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
