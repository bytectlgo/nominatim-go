// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"nominatim-go/ent/addressrow"
	"nominatim-go/ent/place"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// AddressRow is the model entity for the AddressRow schema.
type AddressRow struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Component holds the value of the "component" field.
	Component string `json:"component,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// AdminLevel holds the value of the "admin_level" field.
	AdminLevel uint32 `json:"admin_level,omitempty"`
	// Rank holds the value of the "rank" field.
	Rank uint32 `json:"rank,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AddressRowQuery when eager-loading is set.
	Edges              AddressRowEdges `json:"edges"`
	place_address_rows *int
	selectValues       sql.SelectValues
}

// AddressRowEdges holds the relations/edges for other nodes in the graph.
type AddressRowEdges struct {
	// Place holds the value of the place edge.
	Place *Place `json:"place,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PlaceOrErr returns the Place value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AddressRowEdges) PlaceOrErr() (*Place, error) {
	if e.Place != nil {
		return e.Place, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: place.Label}
	}
	return nil, &NotLoadedError{edge: "place"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AddressRow) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case addressrow.FieldID, addressrow.FieldAdminLevel, addressrow.FieldRank:
			values[i] = new(sql.NullInt64)
		case addressrow.FieldComponent, addressrow.FieldName:
			values[i] = new(sql.NullString)
		case addressrow.ForeignKeys[0]: // place_address_rows
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AddressRow fields.
func (_m *AddressRow) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case addressrow.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int64(value.Int64)
		case addressrow.FieldComponent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field component", values[i])
			} else if value.Valid {
				_m.Component = value.String
			}
		case addressrow.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case addressrow.FieldAdminLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field admin_level", values[i])
			} else if value.Valid {
				_m.AdminLevel = uint32(value.Int64)
			}
		case addressrow.FieldRank:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rank", values[i])
			} else if value.Valid {
				_m.Rank = uint32(value.Int64)
			}
		case addressrow.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field place_address_rows", value)
			} else if value.Valid {
				_m.place_address_rows = new(int)
				*_m.place_address_rows = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AddressRow.
// This includes values selected through modifiers, order, etc.
func (_m *AddressRow) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryPlace queries the "place" edge of the AddressRow entity.
func (_m *AddressRow) QueryPlace() *PlaceQuery {
	return NewAddressRowClient(_m.config).QueryPlace(_m)
}

// Update returns a builder for updating this AddressRow.
// Note that you need to call AddressRow.Unwrap() before calling this method if this AddressRow
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *AddressRow) Update() *AddressRowUpdateOne {
	return NewAddressRowClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the AddressRow entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *AddressRow) Unwrap() *AddressRow {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: AddressRow is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *AddressRow) String() string {
	var builder strings.Builder
	builder.WriteString("AddressRow(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("component=")
	builder.WriteString(_m.Component)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("admin_level=")
	builder.WriteString(fmt.Sprintf("%v", _m.AdminLevel))
	builder.WriteString(", ")
	builder.WriteString("rank=")
	builder.WriteString(fmt.Sprintf("%v", _m.Rank))
	builder.WriteByte(')')
	return builder.String()
}

// AddressRows is a parsable slice of AddressRow.
type AddressRows []*AddressRow
