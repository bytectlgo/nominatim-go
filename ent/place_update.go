// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"nominatim-go/ent/addressrow"
	"nominatim-go/ent/place"
	"nominatim-go/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlaceUpdate is the builder for updating Place entities.
type PlaceUpdate struct {
	config
	hooks     []Hook
	mutation  *PlaceMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PlaceUpdate builder.
func (_u *PlaceUpdate) Where(ps ...predicate.Place) *PlaceUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetPlaceID sets the "place_id" field.
func (_u *PlaceUpdate) SetPlaceID(v int64) *PlaceUpdate {
	_u.mutation.ResetPlaceID()
	_u.mutation.SetPlaceID(v)
	return _u
}

// SetNillablePlaceID sets the "place_id" field if the given value is not nil.
func (_u *PlaceUpdate) SetNillablePlaceID(v *int64) *PlaceUpdate {
	if v != nil {
		_u.SetPlaceID(*v)
	}
	return _u
}

// AddPlaceID adds value to the "place_id" field.
func (_u *PlaceUpdate) AddPlaceID(v int64) *PlaceUpdate {
	_u.mutation.AddPlaceID(v)
	return _u
}

// SetLicence sets the "licence" field.
func (_u *PlaceUpdate) SetLicence(v string) *PlaceUpdate {
	_u.mutation.SetLicence(v)
	return _u
}

// SetNillableLicence sets the "licence" field if the given value is not nil.
func (_u *PlaceUpdate) SetNillableLicence(v *string) *PlaceUpdate {
	if v != nil {
		_u.SetLicence(*v)
	}
	return _u
}

// ClearLicence clears the value of the "licence" field.
func (_u *PlaceUpdate) ClearLicence() *PlaceUpdate {
	_u.mutation.ClearLicence()
	return _u
}

// SetOsmID sets the "osm_id" field.
func (_u *PlaceUpdate) SetOsmID(v string) *PlaceUpdate {
	_u.mutation.SetOsmID(v)
	return _u
}

// SetNillableOsmID sets the "osm_id" field if the given value is not nil.
func (_u *PlaceUpdate) SetNillableOsmID(v *string) *PlaceUpdate {
	if v != nil {
		_u.SetOsmID(*v)
	}
	return _u
}

// SetOsmType sets the "osm_type" field.
func (_u *PlaceUpdate) SetOsmType(v string) *PlaceUpdate {
	_u.mutation.SetOsmType(v)
	return _u
}

// SetNillableOsmType sets the "osm_type" field if the given value is not nil.
func (_u *PlaceUpdate) SetNillableOsmType(v *string) *PlaceUpdate {
	if v != nil {
		_u.SetOsmType(*v)
	}
	return _u
}

// SetCategory sets the "category" field.
func (_u *PlaceUpdate) SetCategory(v string) *PlaceUpdate {
	_u.mutation.SetCategory(v)
	return _u
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_u *PlaceUpdate) SetNillableCategory(v *string) *PlaceUpdate {
	if v != nil {
		_u.SetCategory(*v)
	}
	return _u
}

// ClearCategory clears the value of the "category" field.
func (_u *PlaceUpdate) ClearCategory() *PlaceUpdate {
	_u.mutation.ClearCategory()
	return _u
}

// SetType sets the "type" field.
func (_u *PlaceUpdate) SetType(v string) *PlaceUpdate {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *PlaceUpdate) SetNillableType(v *string) *PlaceUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// ClearType clears the value of the "type" field.
func (_u *PlaceUpdate) ClearType() *PlaceUpdate {
	_u.mutation.ClearType()
	return _u
}

// SetImportance sets the "importance" field.
func (_u *PlaceUpdate) SetImportance(v float64) *PlaceUpdate {
	_u.mutation.ResetImportance()
	_u.mutation.SetImportance(v)
	return _u
}

// SetNillableImportance sets the "importance" field if the given value is not nil.
func (_u *PlaceUpdate) SetNillableImportance(v *float64) *PlaceUpdate {
	if v != nil {
		_u.SetImportance(*v)
	}
	return _u
}

// AddImportance adds value to the "importance" field.
func (_u *PlaceUpdate) AddImportance(v float64) *PlaceUpdate {
	_u.mutation.AddImportance(v)
	return _u
}

// ClearImportance clears the value of the "importance" field.
func (_u *PlaceUpdate) ClearImportance() *PlaceUpdate {
	_u.mutation.ClearImportance()
	return _u
}

// SetDisplayName sets the "display_name" field.
func (_u *PlaceUpdate) SetDisplayName(v string) *PlaceUpdate {
	_u.mutation.SetDisplayName(v)
	return _u
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (_u *PlaceUpdate) SetNillableDisplayName(v *string) *PlaceUpdate {
	if v != nil {
		_u.SetDisplayName(*v)
	}
	return _u
}

// ClearDisplayName clears the value of the "display_name" field.
func (_u *PlaceUpdate) ClearDisplayName() *PlaceUpdate {
	_u.mutation.ClearDisplayName()
	return _u
}

// SetLat sets the "lat" field.
func (_u *PlaceUpdate) SetLat(v float64) *PlaceUpdate {
	_u.mutation.ResetLat()
	_u.mutation.SetLat(v)
	return _u
}

// SetNillableLat sets the "lat" field if the given value is not nil.
func (_u *PlaceUpdate) SetNillableLat(v *float64) *PlaceUpdate {
	if v != nil {
		_u.SetLat(*v)
	}
	return _u
}

// AddLat adds value to the "lat" field.
func (_u *PlaceUpdate) AddLat(v float64) *PlaceUpdate {
	_u.mutation.AddLat(v)
	return _u
}

// SetLon sets the "lon" field.
func (_u *PlaceUpdate) SetLon(v float64) *PlaceUpdate {
	_u.mutation.ResetLon()
	_u.mutation.SetLon(v)
	return _u
}

// SetNillableLon sets the "lon" field if the given value is not nil.
func (_u *PlaceUpdate) SetNillableLon(v *float64) *PlaceUpdate {
	if v != nil {
		_u.SetLon(*v)
	}
	return _u
}

// AddLon adds value to the "lon" field.
func (_u *PlaceUpdate) AddLon(v float64) *PlaceUpdate {
	_u.mutation.AddLon(v)
	return _u
}

// SetBboxSouth sets the "bbox_south" field.
func (_u *PlaceUpdate) SetBboxSouth(v float64) *PlaceUpdate {
	_u.mutation.ResetBboxSouth()
	_u.mutation.SetBboxSouth(v)
	return _u
}

// SetNillableBboxSouth sets the "bbox_south" field if the given value is not nil.
func (_u *PlaceUpdate) SetNillableBboxSouth(v *float64) *PlaceUpdate {
	if v != nil {
		_u.SetBboxSouth(*v)
	}
	return _u
}

// AddBboxSouth adds value to the "bbox_south" field.
func (_u *PlaceUpdate) AddBboxSouth(v float64) *PlaceUpdate {
	_u.mutation.AddBboxSouth(v)
	return _u
}

// ClearBboxSouth clears the value of the "bbox_south" field.
func (_u *PlaceUpdate) ClearBboxSouth() *PlaceUpdate {
	_u.mutation.ClearBboxSouth()
	return _u
}

// SetBboxNorth sets the "bbox_north" field.
func (_u *PlaceUpdate) SetBboxNorth(v float64) *PlaceUpdate {
	_u.mutation.ResetBboxNorth()
	_u.mutation.SetBboxNorth(v)
	return _u
}

// SetNillableBboxNorth sets the "bbox_north" field if the given value is not nil.
func (_u *PlaceUpdate) SetNillableBboxNorth(v *float64) *PlaceUpdate {
	if v != nil {
		_u.SetBboxNorth(*v)
	}
	return _u
}

// AddBboxNorth adds value to the "bbox_north" field.
func (_u *PlaceUpdate) AddBboxNorth(v float64) *PlaceUpdate {
	_u.mutation.AddBboxNorth(v)
	return _u
}

// ClearBboxNorth clears the value of the "bbox_north" field.
func (_u *PlaceUpdate) ClearBboxNorth() *PlaceUpdate {
	_u.mutation.ClearBboxNorth()
	return _u
}

// SetBboxWest sets the "bbox_west" field.
func (_u *PlaceUpdate) SetBboxWest(v float64) *PlaceUpdate {
	_u.mutation.ResetBboxWest()
	_u.mutation.SetBboxWest(v)
	return _u
}

// SetNillableBboxWest sets the "bbox_west" field if the given value is not nil.
func (_u *PlaceUpdate) SetNillableBboxWest(v *float64) *PlaceUpdate {
	if v != nil {
		_u.SetBboxWest(*v)
	}
	return _u
}

// AddBboxWest adds value to the "bbox_west" field.
func (_u *PlaceUpdate) AddBboxWest(v float64) *PlaceUpdate {
	_u.mutation.AddBboxWest(v)
	return _u
}

// ClearBboxWest clears the value of the "bbox_west" field.
func (_u *PlaceUpdate) ClearBboxWest() *PlaceUpdate {
	_u.mutation.ClearBboxWest()
	return _u
}

// SetBboxEast sets the "bbox_east" field.
func (_u *PlaceUpdate) SetBboxEast(v float64) *PlaceUpdate {
	_u.mutation.ResetBboxEast()
	_u.mutation.SetBboxEast(v)
	return _u
}

// SetNillableBboxEast sets the "bbox_east" field if the given value is not nil.
func (_u *PlaceUpdate) SetNillableBboxEast(v *float64) *PlaceUpdate {
	if v != nil {
		_u.SetBboxEast(*v)
	}
	return _u
}

// AddBboxEast adds value to the "bbox_east" field.
func (_u *PlaceUpdate) AddBboxEast(v float64) *PlaceUpdate {
	_u.mutation.AddBboxEast(v)
	return _u
}

// ClearBboxEast clears the value of the "bbox_east" field.
func (_u *PlaceUpdate) ClearBboxEast() *PlaceUpdate {
	_u.mutation.ClearBboxEast()
	return _u
}

// SetIcon sets the "icon" field.
func (_u *PlaceUpdate) SetIcon(v string) *PlaceUpdate {
	_u.mutation.SetIcon(v)
	return _u
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (_u *PlaceUpdate) SetNillableIcon(v *string) *PlaceUpdate {
	if v != nil {
		_u.SetIcon(*v)
	}
	return _u
}

// ClearIcon clears the value of the "icon" field.
func (_u *PlaceUpdate) ClearIcon() *PlaceUpdate {
	_u.mutation.ClearIcon()
	return _u
}

// SetExtratags sets the "extratags" field.
func (_u *PlaceUpdate) SetExtratags(v map[string]string) *PlaceUpdate {
	_u.mutation.SetExtratags(v)
	return _u
}

// ClearExtratags clears the value of the "extratags" field.
func (_u *PlaceUpdate) ClearExtratags() *PlaceUpdate {
	_u.mutation.ClearExtratags()
	return _u
}

// SetNamedetails sets the "namedetails" field.
func (_u *PlaceUpdate) SetNamedetails(v map[string]string) *PlaceUpdate {
	_u.mutation.SetNamedetails(v)
	return _u
}

// ClearNamedetails clears the value of the "namedetails" field.
func (_u *PlaceUpdate) ClearNamedetails() *PlaceUpdate {
	_u.mutation.ClearNamedetails()
	return _u
}

// SetPolygonGeojson sets the "polygon_geojson" field.
func (_u *PlaceUpdate) SetPolygonGeojson(v string) *PlaceUpdate {
	_u.mutation.SetPolygonGeojson(v)
	return _u
}

// SetNillablePolygonGeojson sets the "polygon_geojson" field if the given value is not nil.
func (_u *PlaceUpdate) SetNillablePolygonGeojson(v *string) *PlaceUpdate {
	if v != nil {
		_u.SetPolygonGeojson(*v)
	}
	return _u
}

// ClearPolygonGeojson clears the value of the "polygon_geojson" field.
func (_u *PlaceUpdate) ClearPolygonGeojson() *PlaceUpdate {
	_u.mutation.ClearPolygonGeojson()
	return _u
}

// AddAddressRowIDs adds the "address_rows" edge to the AddressRow entity by IDs.
func (_u *PlaceUpdate) AddAddressRowIDs(ids ...int64) *PlaceUpdate {
	_u.mutation.AddAddressRowIDs(ids...)
	return _u
}

// AddAddressRows adds the "address_rows" edges to the AddressRow entity.
func (_u *PlaceUpdate) AddAddressRows(v ...*AddressRow) *PlaceUpdate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAddressRowIDs(ids...)
}

// Mutation returns the PlaceMutation object of the builder.
func (_u *PlaceUpdate) Mutation() *PlaceMutation {
	return _u.mutation
}

// ClearAddressRows clears all "address_rows" edges to the AddressRow entity.
func (_u *PlaceUpdate) ClearAddressRows() *PlaceUpdate {
	_u.mutation.ClearAddressRows()
	return _u
}

// RemoveAddressRowIDs removes the "address_rows" edge to AddressRow entities by IDs.
func (_u *PlaceUpdate) RemoveAddressRowIDs(ids ...int64) *PlaceUpdate {
	_u.mutation.RemoveAddressRowIDs(ids...)
	return _u
}

// RemoveAddressRows removes "address_rows" edges to AddressRow entities.
func (_u *PlaceUpdate) RemoveAddressRows(v ...*AddressRow) *PlaceUpdate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAddressRowIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *PlaceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PlaceUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *PlaceUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PlaceUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *PlaceUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PlaceUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *PlaceUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(place.Table, place.Columns, sqlgraph.NewFieldSpec(place.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.PlaceID(); ok {
		_spec.SetField(place.FieldPlaceID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedPlaceID(); ok {
		_spec.AddField(place.FieldPlaceID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.Licence(); ok {
		_spec.SetField(place.FieldLicence, field.TypeString, value)
	}
	if _u.mutation.LicenceCleared() {
		_spec.ClearField(place.FieldLicence, field.TypeString)
	}
	if value, ok := _u.mutation.OsmID(); ok {
		_spec.SetField(place.FieldOsmID, field.TypeString, value)
	}
	if value, ok := _u.mutation.OsmType(); ok {
		_spec.SetField(place.FieldOsmType, field.TypeString, value)
	}
	if value, ok := _u.mutation.Category(); ok {
		_spec.SetField(place.FieldCategory, field.TypeString, value)
	}
	if _u.mutation.CategoryCleared() {
		_spec.ClearField(place.FieldCategory, field.TypeString)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(place.FieldType, field.TypeString, value)
	}
	if _u.mutation.TypeCleared() {
		_spec.ClearField(place.FieldType, field.TypeString)
	}
	if value, ok := _u.mutation.Importance(); ok {
		_spec.SetField(place.FieldImportance, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedImportance(); ok {
		_spec.AddField(place.FieldImportance, field.TypeFloat64, value)
	}
	if _u.mutation.ImportanceCleared() {
		_spec.ClearField(place.FieldImportance, field.TypeFloat64)
	}
	if value, ok := _u.mutation.DisplayName(); ok {
		_spec.SetField(place.FieldDisplayName, field.TypeString, value)
	}
	if _u.mutation.DisplayNameCleared() {
		_spec.ClearField(place.FieldDisplayName, field.TypeString)
	}
	if value, ok := _u.mutation.Lat(); ok {
		_spec.SetField(place.FieldLat, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedLat(); ok {
		_spec.AddField(place.FieldLat, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Lon(); ok {
		_spec.SetField(place.FieldLon, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedLon(); ok {
		_spec.AddField(place.FieldLon, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.BboxSouth(); ok {
		_spec.SetField(place.FieldBboxSouth, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedBboxSouth(); ok {
		_spec.AddField(place.FieldBboxSouth, field.TypeFloat64, value)
	}
	if _u.mutation.BboxSouthCleared() {
		_spec.ClearField(place.FieldBboxSouth, field.TypeFloat64)
	}
	if value, ok := _u.mutation.BboxNorth(); ok {
		_spec.SetField(place.FieldBboxNorth, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedBboxNorth(); ok {
		_spec.AddField(place.FieldBboxNorth, field.TypeFloat64, value)
	}
	if _u.mutation.BboxNorthCleared() {
		_spec.ClearField(place.FieldBboxNorth, field.TypeFloat64)
	}
	if value, ok := _u.mutation.BboxWest(); ok {
		_spec.SetField(place.FieldBboxWest, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedBboxWest(); ok {
		_spec.AddField(place.FieldBboxWest, field.TypeFloat64, value)
	}
	if _u.mutation.BboxWestCleared() {
		_spec.ClearField(place.FieldBboxWest, field.TypeFloat64)
	}
	if value, ok := _u.mutation.BboxEast(); ok {
		_spec.SetField(place.FieldBboxEast, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedBboxEast(); ok {
		_spec.AddField(place.FieldBboxEast, field.TypeFloat64, value)
	}
	if _u.mutation.BboxEastCleared() {
		_spec.ClearField(place.FieldBboxEast, field.TypeFloat64)
	}
	if value, ok := _u.mutation.Icon(); ok {
		_spec.SetField(place.FieldIcon, field.TypeString, value)
	}
	if _u.mutation.IconCleared() {
		_spec.ClearField(place.FieldIcon, field.TypeString)
	}
	if value, ok := _u.mutation.Extratags(); ok {
		_spec.SetField(place.FieldExtratags, field.TypeJSON, value)
	}
	if _u.mutation.ExtratagsCleared() {
		_spec.ClearField(place.FieldExtratags, field.TypeJSON)
	}
	if value, ok := _u.mutation.Namedetails(); ok {
		_spec.SetField(place.FieldNamedetails, field.TypeJSON, value)
	}
	if _u.mutation.NamedetailsCleared() {
		_spec.ClearField(place.FieldNamedetails, field.TypeJSON)
	}
	if value, ok := _u.mutation.PolygonGeojson(); ok {
		_spec.SetField(place.FieldPolygonGeojson, field.TypeString, value)
	}
	if _u.mutation.PolygonGeojsonCleared() {
		_spec.ClearField(place.FieldPolygonGeojson, field.TypeString)
	}
	if _u.mutation.AddressRowsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.AddressRowsTable,
			Columns: []string{place.AddressRowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addressrow.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAddressRowsIDs(); len(nodes) > 0 && !_u.mutation.AddressRowsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.AddressRowsTable,
			Columns: []string{place.AddressRowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addressrow.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AddressRowsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.AddressRowsTable,
			Columns: []string{place.AddressRowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addressrow.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{place.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// PlaceUpdateOne is the builder for updating a single Place entity.
type PlaceUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PlaceMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetPlaceID sets the "place_id" field.
func (_u *PlaceUpdateOne) SetPlaceID(v int64) *PlaceUpdateOne {
	_u.mutation.ResetPlaceID()
	_u.mutation.SetPlaceID(v)
	return _u
}

// SetNillablePlaceID sets the "place_id" field if the given value is not nil.
func (_u *PlaceUpdateOne) SetNillablePlaceID(v *int64) *PlaceUpdateOne {
	if v != nil {
		_u.SetPlaceID(*v)
	}
	return _u
}

// AddPlaceID adds value to the "place_id" field.
func (_u *PlaceUpdateOne) AddPlaceID(v int64) *PlaceUpdateOne {
	_u.mutation.AddPlaceID(v)
	return _u
}

// SetLicence sets the "licence" field.
func (_u *PlaceUpdateOne) SetLicence(v string) *PlaceUpdateOne {
	_u.mutation.SetLicence(v)
	return _u
}

// SetNillableLicence sets the "licence" field if the given value is not nil.
func (_u *PlaceUpdateOne) SetNillableLicence(v *string) *PlaceUpdateOne {
	if v != nil {
		_u.SetLicence(*v)
	}
	return _u
}

// ClearLicence clears the value of the "licence" field.
func (_u *PlaceUpdateOne) ClearLicence() *PlaceUpdateOne {
	_u.mutation.ClearLicence()
	return _u
}

// SetOsmID sets the "osm_id" field.
func (_u *PlaceUpdateOne) SetOsmID(v string) *PlaceUpdateOne {
	_u.mutation.SetOsmID(v)
	return _u
}

// SetNillableOsmID sets the "osm_id" field if the given value is not nil.
func (_u *PlaceUpdateOne) SetNillableOsmID(v *string) *PlaceUpdateOne {
	if v != nil {
		_u.SetOsmID(*v)
	}
	return _u
}

// SetOsmType sets the "osm_type" field.
func (_u *PlaceUpdateOne) SetOsmType(v string) *PlaceUpdateOne {
	_u.mutation.SetOsmType(v)
	return _u
}

// SetNillableOsmType sets the "osm_type" field if the given value is not nil.
func (_u *PlaceUpdateOne) SetNillableOsmType(v *string) *PlaceUpdateOne {
	if v != nil {
		_u.SetOsmType(*v)
	}
	return _u
}

// SetCategory sets the "category" field.
func (_u *PlaceUpdateOne) SetCategory(v string) *PlaceUpdateOne {
	_u.mutation.SetCategory(v)
	return _u
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_u *PlaceUpdateOne) SetNillableCategory(v *string) *PlaceUpdateOne {
	if v != nil {
		_u.SetCategory(*v)
	}
	return _u
}

// ClearCategory clears the value of the "category" field.
func (_u *PlaceUpdateOne) ClearCategory() *PlaceUpdateOne {
	_u.mutation.ClearCategory()
	return _u
}

// SetType sets the "type" field.
func (_u *PlaceUpdateOne) SetType(v string) *PlaceUpdateOne {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *PlaceUpdateOne) SetNillableType(v *string) *PlaceUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// ClearType clears the value of the "type" field.
func (_u *PlaceUpdateOne) ClearType() *PlaceUpdateOne {
	_u.mutation.ClearType()
	return _u
}

// SetImportance sets the "importance" field.
func (_u *PlaceUpdateOne) SetImportance(v float64) *PlaceUpdateOne {
	_u.mutation.ResetImportance()
	_u.mutation.SetImportance(v)
	return _u
}

// SetNillableImportance sets the "importance" field if the given value is not nil.
func (_u *PlaceUpdateOne) SetNillableImportance(v *float64) *PlaceUpdateOne {
	if v != nil {
		_u.SetImportance(*v)
	}
	return _u
}

// AddImportance adds value to the "importance" field.
func (_u *PlaceUpdateOne) AddImportance(v float64) *PlaceUpdateOne {
	_u.mutation.AddImportance(v)
	return _u
}

// ClearImportance clears the value of the "importance" field.
func (_u *PlaceUpdateOne) ClearImportance() *PlaceUpdateOne {
	_u.mutation.ClearImportance()
	return _u
}

// SetDisplayName sets the "display_name" field.
func (_u *PlaceUpdateOne) SetDisplayName(v string) *PlaceUpdateOne {
	_u.mutation.SetDisplayName(v)
	return _u
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (_u *PlaceUpdateOne) SetNillableDisplayName(v *string) *PlaceUpdateOne {
	if v != nil {
		_u.SetDisplayName(*v)
	}
	return _u
}

// ClearDisplayName clears the value of the "display_name" field.
func (_u *PlaceUpdateOne) ClearDisplayName() *PlaceUpdateOne {
	_u.mutation.ClearDisplayName()
	return _u
}

// SetLat sets the "lat" field.
func (_u *PlaceUpdateOne) SetLat(v float64) *PlaceUpdateOne {
	_u.mutation.ResetLat()
	_u.mutation.SetLat(v)
	return _u
}

// SetNillableLat sets the "lat" field if the given value is not nil.
func (_u *PlaceUpdateOne) SetNillableLat(v *float64) *PlaceUpdateOne {
	if v != nil {
		_u.SetLat(*v)
	}
	return _u
}

// AddLat adds value to the "lat" field.
func (_u *PlaceUpdateOne) AddLat(v float64) *PlaceUpdateOne {
	_u.mutation.AddLat(v)
	return _u
}

// SetLon sets the "lon" field.
func (_u *PlaceUpdateOne) SetLon(v float64) *PlaceUpdateOne {
	_u.mutation.ResetLon()
	_u.mutation.SetLon(v)
	return _u
}

// SetNillableLon sets the "lon" field if the given value is not nil.
func (_u *PlaceUpdateOne) SetNillableLon(v *float64) *PlaceUpdateOne {
	if v != nil {
		_u.SetLon(*v)
	}
	return _u
}

// AddLon adds value to the "lon" field.
func (_u *PlaceUpdateOne) AddLon(v float64) *PlaceUpdateOne {
	_u.mutation.AddLon(v)
	return _u
}

// SetBboxSouth sets the "bbox_south" field.
func (_u *PlaceUpdateOne) SetBboxSouth(v float64) *PlaceUpdateOne {
	_u.mutation.ResetBboxSouth()
	_u.mutation.SetBboxSouth(v)
	return _u
}

// SetNillableBboxSouth sets the "bbox_south" field if the given value is not nil.
func (_u *PlaceUpdateOne) SetNillableBboxSouth(v *float64) *PlaceUpdateOne {
	if v != nil {
		_u.SetBboxSouth(*v)
	}
	return _u
}

// AddBboxSouth adds value to the "bbox_south" field.
func (_u *PlaceUpdateOne) AddBboxSouth(v float64) *PlaceUpdateOne {
	_u.mutation.AddBboxSouth(v)
	return _u
}

// ClearBboxSouth clears the value of the "bbox_south" field.
func (_u *PlaceUpdateOne) ClearBboxSouth() *PlaceUpdateOne {
	_u.mutation.ClearBboxSouth()
	return _u
}

// SetBboxNorth sets the "bbox_north" field.
func (_u *PlaceUpdateOne) SetBboxNorth(v float64) *PlaceUpdateOne {
	_u.mutation.ResetBboxNorth()
	_u.mutation.SetBboxNorth(v)
	return _u
}

// SetNillableBboxNorth sets the "bbox_north" field if the given value is not nil.
func (_u *PlaceUpdateOne) SetNillableBboxNorth(v *float64) *PlaceUpdateOne {
	if v != nil {
		_u.SetBboxNorth(*v)
	}
	return _u
}

// AddBboxNorth adds value to the "bbox_north" field.
func (_u *PlaceUpdateOne) AddBboxNorth(v float64) *PlaceUpdateOne {
	_u.mutation.AddBboxNorth(v)
	return _u
}

// ClearBboxNorth clears the value of the "bbox_north" field.
func (_u *PlaceUpdateOne) ClearBboxNorth() *PlaceUpdateOne {
	_u.mutation.ClearBboxNorth()
	return _u
}

// SetBboxWest sets the "bbox_west" field.
func (_u *PlaceUpdateOne) SetBboxWest(v float64) *PlaceUpdateOne {
	_u.mutation.ResetBboxWest()
	_u.mutation.SetBboxWest(v)
	return _u
}

// SetNillableBboxWest sets the "bbox_west" field if the given value is not nil.
func (_u *PlaceUpdateOne) SetNillableBboxWest(v *float64) *PlaceUpdateOne {
	if v != nil {
		_u.SetBboxWest(*v)
	}
	return _u
}

// AddBboxWest adds value to the "bbox_west" field.
func (_u *PlaceUpdateOne) AddBboxWest(v float64) *PlaceUpdateOne {
	_u.mutation.AddBboxWest(v)
	return _u
}

// ClearBboxWest clears the value of the "bbox_west" field.
func (_u *PlaceUpdateOne) ClearBboxWest() *PlaceUpdateOne {
	_u.mutation.ClearBboxWest()
	return _u
}

// SetBboxEast sets the "bbox_east" field.
func (_u *PlaceUpdateOne) SetBboxEast(v float64) *PlaceUpdateOne {
	_u.mutation.ResetBboxEast()
	_u.mutation.SetBboxEast(v)
	return _u
}

// SetNillableBboxEast sets the "bbox_east" field if the given value is not nil.
func (_u *PlaceUpdateOne) SetNillableBboxEast(v *float64) *PlaceUpdateOne {
	if v != nil {
		_u.SetBboxEast(*v)
	}
	return _u
}

// AddBboxEast adds value to the "bbox_east" field.
func (_u *PlaceUpdateOne) AddBboxEast(v float64) *PlaceUpdateOne {
	_u.mutation.AddBboxEast(v)
	return _u
}

// ClearBboxEast clears the value of the "bbox_east" field.
func (_u *PlaceUpdateOne) ClearBboxEast() *PlaceUpdateOne {
	_u.mutation.ClearBboxEast()
	return _u
}

// SetIcon sets the "icon" field.
func (_u *PlaceUpdateOne) SetIcon(v string) *PlaceUpdateOne {
	_u.mutation.SetIcon(v)
	return _u
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (_u *PlaceUpdateOne) SetNillableIcon(v *string) *PlaceUpdateOne {
	if v != nil {
		_u.SetIcon(*v)
	}
	return _u
}

// ClearIcon clears the value of the "icon" field.
func (_u *PlaceUpdateOne) ClearIcon() *PlaceUpdateOne {
	_u.mutation.ClearIcon()
	return _u
}

// SetExtratags sets the "extratags" field.
func (_u *PlaceUpdateOne) SetExtratags(v map[string]string) *PlaceUpdateOne {
	_u.mutation.SetExtratags(v)
	return _u
}

// ClearExtratags clears the value of the "extratags" field.
func (_u *PlaceUpdateOne) ClearExtratags() *PlaceUpdateOne {
	_u.mutation.ClearExtratags()
	return _u
}

// SetNamedetails sets the "namedetails" field.
func (_u *PlaceUpdateOne) SetNamedetails(v map[string]string) *PlaceUpdateOne {
	_u.mutation.SetNamedetails(v)
	return _u
}

// ClearNamedetails clears the value of the "namedetails" field.
func (_u *PlaceUpdateOne) ClearNamedetails() *PlaceUpdateOne {
	_u.mutation.ClearNamedetails()
	return _u
}

// SetPolygonGeojson sets the "polygon_geojson" field.
func (_u *PlaceUpdateOne) SetPolygonGeojson(v string) *PlaceUpdateOne {
	_u.mutation.SetPolygonGeojson(v)
	return _u
}

// SetNillablePolygonGeojson sets the "polygon_geojson" field if the given value is not nil.
func (_u *PlaceUpdateOne) SetNillablePolygonGeojson(v *string) *PlaceUpdateOne {
	if v != nil {
		_u.SetPolygonGeojson(*v)
	}
	return _u
}

// ClearPolygonGeojson clears the value of the "polygon_geojson" field.
func (_u *PlaceUpdateOne) ClearPolygonGeojson() *PlaceUpdateOne {
	_u.mutation.ClearPolygonGeojson()
	return _u
}

// AddAddressRowIDs adds the "address_rows" edge to the AddressRow entity by IDs.
func (_u *PlaceUpdateOne) AddAddressRowIDs(ids ...int64) *PlaceUpdateOne {
	_u.mutation.AddAddressRowIDs(ids...)
	return _u
}

// AddAddressRows adds the "address_rows" edges to the AddressRow entity.
func (_u *PlaceUpdateOne) AddAddressRows(v ...*AddressRow) *PlaceUpdateOne {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAddressRowIDs(ids...)
}

// Mutation returns the PlaceMutation object of the builder.
func (_u *PlaceUpdateOne) Mutation() *PlaceMutation {
	return _u.mutation
}

// ClearAddressRows clears all "address_rows" edges to the AddressRow entity.
func (_u *PlaceUpdateOne) ClearAddressRows() *PlaceUpdateOne {
	_u.mutation.ClearAddressRows()
	return _u
}

// RemoveAddressRowIDs removes the "address_rows" edge to AddressRow entities by IDs.
func (_u *PlaceUpdateOne) RemoveAddressRowIDs(ids ...int64) *PlaceUpdateOne {
	_u.mutation.RemoveAddressRowIDs(ids...)
	return _u
}

// RemoveAddressRows removes "address_rows" edges to AddressRow entities.
func (_u *PlaceUpdateOne) RemoveAddressRows(v ...*AddressRow) *PlaceUpdateOne {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAddressRowIDs(ids...)
}

// Where appends a list predicates to the PlaceUpdate builder.
func (_u *PlaceUpdateOne) Where(ps ...predicate.Place) *PlaceUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *PlaceUpdateOne) Select(field string, fields ...string) *PlaceUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Place entity.
func (_u *PlaceUpdateOne) Save(ctx context.Context) (*Place, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PlaceUpdateOne) SaveX(ctx context.Context) *Place {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *PlaceUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PlaceUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *PlaceUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PlaceUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *PlaceUpdateOne) sqlSave(ctx context.Context) (_node *Place, err error) {
	_spec := sqlgraph.NewUpdateSpec(place.Table, place.Columns, sqlgraph.NewFieldSpec(place.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Place.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, place.FieldID)
		for _, f := range fields {
			if !place.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != place.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.PlaceID(); ok {
		_spec.SetField(place.FieldPlaceID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedPlaceID(); ok {
		_spec.AddField(place.FieldPlaceID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.Licence(); ok {
		_spec.SetField(place.FieldLicence, field.TypeString, value)
	}
	if _u.mutation.LicenceCleared() {
		_spec.ClearField(place.FieldLicence, field.TypeString)
	}
	if value, ok := _u.mutation.OsmID(); ok {
		_spec.SetField(place.FieldOsmID, field.TypeString, value)
	}
	if value, ok := _u.mutation.OsmType(); ok {
		_spec.SetField(place.FieldOsmType, field.TypeString, value)
	}
	if value, ok := _u.mutation.Category(); ok {
		_spec.SetField(place.FieldCategory, field.TypeString, value)
	}
	if _u.mutation.CategoryCleared() {
		_spec.ClearField(place.FieldCategory, field.TypeString)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(place.FieldType, field.TypeString, value)
	}
	if _u.mutation.TypeCleared() {
		_spec.ClearField(place.FieldType, field.TypeString)
	}
	if value, ok := _u.mutation.Importance(); ok {
		_spec.SetField(place.FieldImportance, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedImportance(); ok {
		_spec.AddField(place.FieldImportance, field.TypeFloat64, value)
	}
	if _u.mutation.ImportanceCleared() {
		_spec.ClearField(place.FieldImportance, field.TypeFloat64)
	}
	if value, ok := _u.mutation.DisplayName(); ok {
		_spec.SetField(place.FieldDisplayName, field.TypeString, value)
	}
	if _u.mutation.DisplayNameCleared() {
		_spec.ClearField(place.FieldDisplayName, field.TypeString)
	}
	if value, ok := _u.mutation.Lat(); ok {
		_spec.SetField(place.FieldLat, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedLat(); ok {
		_spec.AddField(place.FieldLat, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Lon(); ok {
		_spec.SetField(place.FieldLon, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedLon(); ok {
		_spec.AddField(place.FieldLon, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.BboxSouth(); ok {
		_spec.SetField(place.FieldBboxSouth, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedBboxSouth(); ok {
		_spec.AddField(place.FieldBboxSouth, field.TypeFloat64, value)
	}
	if _u.mutation.BboxSouthCleared() {
		_spec.ClearField(place.FieldBboxSouth, field.TypeFloat64)
	}
	if value, ok := _u.mutation.BboxNorth(); ok {
		_spec.SetField(place.FieldBboxNorth, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedBboxNorth(); ok {
		_spec.AddField(place.FieldBboxNorth, field.TypeFloat64, value)
	}
	if _u.mutation.BboxNorthCleared() {
		_spec.ClearField(place.FieldBboxNorth, field.TypeFloat64)
	}
	if value, ok := _u.mutation.BboxWest(); ok {
		_spec.SetField(place.FieldBboxWest, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedBboxWest(); ok {
		_spec.AddField(place.FieldBboxWest, field.TypeFloat64, value)
	}
	if _u.mutation.BboxWestCleared() {
		_spec.ClearField(place.FieldBboxWest, field.TypeFloat64)
	}
	if value, ok := _u.mutation.BboxEast(); ok {
		_spec.SetField(place.FieldBboxEast, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedBboxEast(); ok {
		_spec.AddField(place.FieldBboxEast, field.TypeFloat64, value)
	}
	if _u.mutation.BboxEastCleared() {
		_spec.ClearField(place.FieldBboxEast, field.TypeFloat64)
	}
	if value, ok := _u.mutation.Icon(); ok {
		_spec.SetField(place.FieldIcon, field.TypeString, value)
	}
	if _u.mutation.IconCleared() {
		_spec.ClearField(place.FieldIcon, field.TypeString)
	}
	if value, ok := _u.mutation.Extratags(); ok {
		_spec.SetField(place.FieldExtratags, field.TypeJSON, value)
	}
	if _u.mutation.ExtratagsCleared() {
		_spec.ClearField(place.FieldExtratags, field.TypeJSON)
	}
	if value, ok := _u.mutation.Namedetails(); ok {
		_spec.SetField(place.FieldNamedetails, field.TypeJSON, value)
	}
	if _u.mutation.NamedetailsCleared() {
		_spec.ClearField(place.FieldNamedetails, field.TypeJSON)
	}
	if value, ok := _u.mutation.PolygonGeojson(); ok {
		_spec.SetField(place.FieldPolygonGeojson, field.TypeString, value)
	}
	if _u.mutation.PolygonGeojsonCleared() {
		_spec.ClearField(place.FieldPolygonGeojson, field.TypeString)
	}
	if _u.mutation.AddressRowsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.AddressRowsTable,
			Columns: []string{place.AddressRowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addressrow.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAddressRowsIDs(); len(nodes) > 0 && !_u.mutation.AddressRowsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.AddressRowsTable,
			Columns: []string{place.AddressRowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addressrow.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AddressRowsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.AddressRowsTable,
			Columns: []string{place.AddressRowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addressrow.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &Place{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{place.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
