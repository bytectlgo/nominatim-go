// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"nominatim-go/ent/helloworld"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HelloworldCreate is the builder for creating a Helloworld entity.
type HelloworldCreate struct {
	config
	mutation *HelloworldMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (_c *HelloworldCreate) SetName(v string) *HelloworldCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_c *HelloworldCreate) SetNillableName(v *string) *HelloworldCreate {
	if v != nil {
		_c.SetName(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *HelloworldCreate) SetID(v int64) *HelloworldCreate {
	_c.mutation.SetID(v)
	return _c
}

// Mutation returns the HelloworldMutation object of the builder.
func (_c *HelloworldCreate) Mutation() *HelloworldMutation {
	return _c.mutation
}

// Save creates the Helloworld in the database.
func (_c *HelloworldCreate) Save(ctx context.Context) (*Helloworld, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *HelloworldCreate) SaveX(ctx context.Context) *Helloworld {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *HelloworldCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *HelloworldCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *HelloworldCreate) defaults() {
	if _, ok := _c.mutation.Name(); !ok {
		v := helloworld.DefaultName
		_c.mutation.SetName(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *HelloworldCreate) check() error {
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Helloworld.name"`)}
	}
	return nil
}

func (_c *HelloworldCreate) sqlSave(ctx context.Context) (*Helloworld, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *HelloworldCreate) createSpec() (*Helloworld, *sqlgraph.CreateSpec) {
	var (
		_node = &Helloworld{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(helloworld.Table, sqlgraph.NewFieldSpec(helloworld.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(helloworld.FieldName, field.TypeString, value)
		_node.Name = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Helloworld.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HelloworldUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (_c *HelloworldCreate) OnConflict(opts ...sql.ConflictOption) *HelloworldUpsertOne {
	_c.conflict = opts
	return &HelloworldUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Helloworld.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *HelloworldCreate) OnConflictColumns(columns ...string) *HelloworldUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &HelloworldUpsertOne{
		create: _c,
	}
}

type (
	// HelloworldUpsertOne is the builder for "upsert"-ing
	//  one Helloworld node.
	HelloworldUpsertOne struct {
		create *HelloworldCreate
	}

	// HelloworldUpsert is the "OnConflict" setter.
	HelloworldUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *HelloworldUpsert) SetName(v string) *HelloworldUpsert {
	u.Set(helloworld.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *HelloworldUpsert) UpdateName() *HelloworldUpsert {
	u.SetExcluded(helloworld.FieldName)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Helloworld.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(helloworld.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *HelloworldUpsertOne) UpdateNewValues() *HelloworldUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(helloworld.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Helloworld.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *HelloworldUpsertOne) Ignore() *HelloworldUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HelloworldUpsertOne) DoNothing() *HelloworldUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HelloworldCreate.OnConflict
// documentation for more info.
func (u *HelloworldUpsertOne) Update(set func(*HelloworldUpsert)) *HelloworldUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HelloworldUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *HelloworldUpsertOne) SetName(v string) *HelloworldUpsertOne {
	return u.Update(func(s *HelloworldUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *HelloworldUpsertOne) UpdateName() *HelloworldUpsertOne {
	return u.Update(func(s *HelloworldUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *HelloworldUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HelloworldCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HelloworldUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *HelloworldUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *HelloworldUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// HelloworldCreateBulk is the builder for creating many Helloworld entities in bulk.
type HelloworldCreateBulk struct {
	config
	err      error
	builders []*HelloworldCreate
	conflict []sql.ConflictOption
}

// Save creates the Helloworld entities in the database.
func (_c *HelloworldCreateBulk) Save(ctx context.Context) ([]*Helloworld, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Helloworld, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HelloworldMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *HelloworldCreateBulk) SaveX(ctx context.Context) []*Helloworld {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *HelloworldCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *HelloworldCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Helloworld.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HelloworldUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (_c *HelloworldCreateBulk) OnConflict(opts ...sql.ConflictOption) *HelloworldUpsertBulk {
	_c.conflict = opts
	return &HelloworldUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Helloworld.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *HelloworldCreateBulk) OnConflictColumns(columns ...string) *HelloworldUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &HelloworldUpsertBulk{
		create: _c,
	}
}

// HelloworldUpsertBulk is the builder for "upsert"-ing
// a bulk of Helloworld nodes.
type HelloworldUpsertBulk struct {
	create *HelloworldCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Helloworld.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(helloworld.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *HelloworldUpsertBulk) UpdateNewValues() *HelloworldUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(helloworld.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Helloworld.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *HelloworldUpsertBulk) Ignore() *HelloworldUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HelloworldUpsertBulk) DoNothing() *HelloworldUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HelloworldCreateBulk.OnConflict
// documentation for more info.
func (u *HelloworldUpsertBulk) Update(set func(*HelloworldUpsert)) *HelloworldUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HelloworldUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *HelloworldUpsertBulk) SetName(v string) *HelloworldUpsertBulk {
	return u.Update(func(s *HelloworldUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *HelloworldUpsertBulk) UpdateName() *HelloworldUpsertBulk {
	return u.Update(func(s *HelloworldUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *HelloworldUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the HelloworldCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HelloworldCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HelloworldUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
