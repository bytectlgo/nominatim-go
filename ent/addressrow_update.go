// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"nominatim-go/ent/addressrow"
	"nominatim-go/ent/place"
	"nominatim-go/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AddressRowUpdate is the builder for updating AddressRow entities.
type AddressRowUpdate struct {
	config
	hooks     []Hook
	mutation  *AddressRowMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AddressRowUpdate builder.
func (_u *AddressRowUpdate) Where(ps ...predicate.AddressRow) *AddressRowUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *AddressRowUpdate) SetUpdatedAt(v int64) *AddressRowUpdate {
	_u.mutation.ResetUpdatedAt()
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// AddUpdatedAt adds value to the "updated_at" field.
func (_u *AddressRowUpdate) AddUpdatedAt(v int64) *AddressRowUpdate {
	_u.mutation.AddUpdatedAt(v)
	return _u
}

// SetComponent sets the "component" field.
func (_u *AddressRowUpdate) SetComponent(v string) *AddressRowUpdate {
	_u.mutation.SetComponent(v)
	return _u
}

// SetNillableComponent sets the "component" field if the given value is not nil.
func (_u *AddressRowUpdate) SetNillableComponent(v *string) *AddressRowUpdate {
	if v != nil {
		_u.SetComponent(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *AddressRowUpdate) SetName(v string) *AddressRowUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *AddressRowUpdate) SetNillableName(v *string) *AddressRowUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetAdminLevel sets the "admin_level" field.
func (_u *AddressRowUpdate) SetAdminLevel(v uint32) *AddressRowUpdate {
	_u.mutation.ResetAdminLevel()
	_u.mutation.SetAdminLevel(v)
	return _u
}

// SetNillableAdminLevel sets the "admin_level" field if the given value is not nil.
func (_u *AddressRowUpdate) SetNillableAdminLevel(v *uint32) *AddressRowUpdate {
	if v != nil {
		_u.SetAdminLevel(*v)
	}
	return _u
}

// AddAdminLevel adds value to the "admin_level" field.
func (_u *AddressRowUpdate) AddAdminLevel(v int32) *AddressRowUpdate {
	_u.mutation.AddAdminLevel(v)
	return _u
}

// ClearAdminLevel clears the value of the "admin_level" field.
func (_u *AddressRowUpdate) ClearAdminLevel() *AddressRowUpdate {
	_u.mutation.ClearAdminLevel()
	return _u
}

// SetRank sets the "rank" field.
func (_u *AddressRowUpdate) SetRank(v uint32) *AddressRowUpdate {
	_u.mutation.ResetRank()
	_u.mutation.SetRank(v)
	return _u
}

// SetNillableRank sets the "rank" field if the given value is not nil.
func (_u *AddressRowUpdate) SetNillableRank(v *uint32) *AddressRowUpdate {
	if v != nil {
		_u.SetRank(*v)
	}
	return _u
}

// AddRank adds value to the "rank" field.
func (_u *AddressRowUpdate) AddRank(v int32) *AddressRowUpdate {
	_u.mutation.AddRank(v)
	return _u
}

// SetPlaceID sets the "place" edge to the Place entity by ID.
func (_u *AddressRowUpdate) SetPlaceID(id int) *AddressRowUpdate {
	_u.mutation.SetPlaceID(id)
	return _u
}

// SetPlace sets the "place" edge to the Place entity.
func (_u *AddressRowUpdate) SetPlace(v *Place) *AddressRowUpdate {
	return _u.SetPlaceID(v.ID)
}

// Mutation returns the AddressRowMutation object of the builder.
func (_u *AddressRowUpdate) Mutation() *AddressRowMutation {
	return _u.mutation
}

// ClearPlace clears the "place" edge to the Place entity.
func (_u *AddressRowUpdate) ClearPlace() *AddressRowUpdate {
	_u.mutation.ClearPlace()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *AddressRowUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AddressRowUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *AddressRowUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AddressRowUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *AddressRowUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := addressrow.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *AddressRowUpdate) check() error {
	if _u.mutation.PlaceCleared() && len(_u.mutation.PlaceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AddressRow.place"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *AddressRowUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AddressRowUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *AddressRowUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(addressrow.Table, addressrow.Columns, sqlgraph.NewFieldSpec(addressrow.FieldID, field.TypeInt64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(addressrow.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(addressrow.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.Component(); ok {
		_spec.SetField(addressrow.FieldComponent, field.TypeString, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(addressrow.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.AdminLevel(); ok {
		_spec.SetField(addressrow.FieldAdminLevel, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedAdminLevel(); ok {
		_spec.AddField(addressrow.FieldAdminLevel, field.TypeUint32, value)
	}
	if _u.mutation.AdminLevelCleared() {
		_spec.ClearField(addressrow.FieldAdminLevel, field.TypeUint32)
	}
	if value, ok := _u.mutation.Rank(); ok {
		_spec.SetField(addressrow.FieldRank, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedRank(); ok {
		_spec.AddField(addressrow.FieldRank, field.TypeUint32, value)
	}
	if _u.mutation.PlaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   addressrow.PlaceTable,
			Columns: []string{addressrow.PlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PlaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   addressrow.PlaceTable,
			Columns: []string{addressrow.PlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{addressrow.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// AddressRowUpdateOne is the builder for updating a single AddressRow entity.
type AddressRowUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AddressRowMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *AddressRowUpdateOne) SetUpdatedAt(v int64) *AddressRowUpdateOne {
	_u.mutation.ResetUpdatedAt()
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// AddUpdatedAt adds value to the "updated_at" field.
func (_u *AddressRowUpdateOne) AddUpdatedAt(v int64) *AddressRowUpdateOne {
	_u.mutation.AddUpdatedAt(v)
	return _u
}

// SetComponent sets the "component" field.
func (_u *AddressRowUpdateOne) SetComponent(v string) *AddressRowUpdateOne {
	_u.mutation.SetComponent(v)
	return _u
}

// SetNillableComponent sets the "component" field if the given value is not nil.
func (_u *AddressRowUpdateOne) SetNillableComponent(v *string) *AddressRowUpdateOne {
	if v != nil {
		_u.SetComponent(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *AddressRowUpdateOne) SetName(v string) *AddressRowUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *AddressRowUpdateOne) SetNillableName(v *string) *AddressRowUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetAdminLevel sets the "admin_level" field.
func (_u *AddressRowUpdateOne) SetAdminLevel(v uint32) *AddressRowUpdateOne {
	_u.mutation.ResetAdminLevel()
	_u.mutation.SetAdminLevel(v)
	return _u
}

// SetNillableAdminLevel sets the "admin_level" field if the given value is not nil.
func (_u *AddressRowUpdateOne) SetNillableAdminLevel(v *uint32) *AddressRowUpdateOne {
	if v != nil {
		_u.SetAdminLevel(*v)
	}
	return _u
}

// AddAdminLevel adds value to the "admin_level" field.
func (_u *AddressRowUpdateOne) AddAdminLevel(v int32) *AddressRowUpdateOne {
	_u.mutation.AddAdminLevel(v)
	return _u
}

// ClearAdminLevel clears the value of the "admin_level" field.
func (_u *AddressRowUpdateOne) ClearAdminLevel() *AddressRowUpdateOne {
	_u.mutation.ClearAdminLevel()
	return _u
}

// SetRank sets the "rank" field.
func (_u *AddressRowUpdateOne) SetRank(v uint32) *AddressRowUpdateOne {
	_u.mutation.ResetRank()
	_u.mutation.SetRank(v)
	return _u
}

// SetNillableRank sets the "rank" field if the given value is not nil.
func (_u *AddressRowUpdateOne) SetNillableRank(v *uint32) *AddressRowUpdateOne {
	if v != nil {
		_u.SetRank(*v)
	}
	return _u
}

// AddRank adds value to the "rank" field.
func (_u *AddressRowUpdateOne) AddRank(v int32) *AddressRowUpdateOne {
	_u.mutation.AddRank(v)
	return _u
}

// SetPlaceID sets the "place" edge to the Place entity by ID.
func (_u *AddressRowUpdateOne) SetPlaceID(id int) *AddressRowUpdateOne {
	_u.mutation.SetPlaceID(id)
	return _u
}

// SetPlace sets the "place" edge to the Place entity.
func (_u *AddressRowUpdateOne) SetPlace(v *Place) *AddressRowUpdateOne {
	return _u.SetPlaceID(v.ID)
}

// Mutation returns the AddressRowMutation object of the builder.
func (_u *AddressRowUpdateOne) Mutation() *AddressRowMutation {
	return _u.mutation
}

// ClearPlace clears the "place" edge to the Place entity.
func (_u *AddressRowUpdateOne) ClearPlace() *AddressRowUpdateOne {
	_u.mutation.ClearPlace()
	return _u
}

// Where appends a list predicates to the AddressRowUpdate builder.
func (_u *AddressRowUpdateOne) Where(ps ...predicate.AddressRow) *AddressRowUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *AddressRowUpdateOne) Select(field string, fields ...string) *AddressRowUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated AddressRow entity.
func (_u *AddressRowUpdateOne) Save(ctx context.Context) (*AddressRow, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AddressRowUpdateOne) SaveX(ctx context.Context) *AddressRow {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *AddressRowUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AddressRowUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *AddressRowUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := addressrow.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *AddressRowUpdateOne) check() error {
	if _u.mutation.PlaceCleared() && len(_u.mutation.PlaceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AddressRow.place"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *AddressRowUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AddressRowUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *AddressRowUpdateOne) sqlSave(ctx context.Context) (_node *AddressRow, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(addressrow.Table, addressrow.Columns, sqlgraph.NewFieldSpec(addressrow.FieldID, field.TypeInt64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AddressRow.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, addressrow.FieldID)
		for _, f := range fields {
			if !addressrow.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != addressrow.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(addressrow.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(addressrow.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.Component(); ok {
		_spec.SetField(addressrow.FieldComponent, field.TypeString, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(addressrow.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.AdminLevel(); ok {
		_spec.SetField(addressrow.FieldAdminLevel, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedAdminLevel(); ok {
		_spec.AddField(addressrow.FieldAdminLevel, field.TypeUint32, value)
	}
	if _u.mutation.AdminLevelCleared() {
		_spec.ClearField(addressrow.FieldAdminLevel, field.TypeUint32)
	}
	if value, ok := _u.mutation.Rank(); ok {
		_spec.SetField(addressrow.FieldRank, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedRank(); ok {
		_spec.AddField(addressrow.FieldRank, field.TypeUint32, value)
	}
	if _u.mutation.PlaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   addressrow.PlaceTable,
			Columns: []string{addressrow.PlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PlaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   addressrow.PlaceTable,
			Columns: []string{addressrow.PlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &AddressRow{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{addressrow.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
