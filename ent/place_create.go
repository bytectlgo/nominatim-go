// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"nominatim-go/ent/addressrow"
	"nominatim-go/ent/place"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlaceCreate is the builder for creating a Place entity.
type PlaceCreate struct {
	config
	mutation *PlaceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (_c *PlaceCreate) SetCreatedAt(v int64) *PlaceCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *PlaceCreate) SetNillableCreatedAt(v *int64) *PlaceCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *PlaceCreate) SetUpdatedAt(v int64) *PlaceCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *PlaceCreate) SetNillableUpdatedAt(v *int64) *PlaceCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetPlaceID sets the "place_id" field.
func (_c *PlaceCreate) SetPlaceID(v int64) *PlaceCreate {
	_c.mutation.SetPlaceID(v)
	return _c
}

// SetLicence sets the "licence" field.
func (_c *PlaceCreate) SetLicence(v string) *PlaceCreate {
	_c.mutation.SetLicence(v)
	return _c
}

// SetNillableLicence sets the "licence" field if the given value is not nil.
func (_c *PlaceCreate) SetNillableLicence(v *string) *PlaceCreate {
	if v != nil {
		_c.SetLicence(*v)
	}
	return _c
}

// SetOsmID sets the "osm_id" field.
func (_c *PlaceCreate) SetOsmID(v string) *PlaceCreate {
	_c.mutation.SetOsmID(v)
	return _c
}

// SetOsmType sets the "osm_type" field.
func (_c *PlaceCreate) SetOsmType(v string) *PlaceCreate {
	_c.mutation.SetOsmType(v)
	return _c
}

// SetCategory sets the "category" field.
func (_c *PlaceCreate) SetCategory(v string) *PlaceCreate {
	_c.mutation.SetCategory(v)
	return _c
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_c *PlaceCreate) SetNillableCategory(v *string) *PlaceCreate {
	if v != nil {
		_c.SetCategory(*v)
	}
	return _c
}

// SetType sets the "type" field.
func (_c *PlaceCreate) SetType(v string) *PlaceCreate {
	_c.mutation.SetType(v)
	return _c
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_c *PlaceCreate) SetNillableType(v *string) *PlaceCreate {
	if v != nil {
		_c.SetType(*v)
	}
	return _c
}

// SetImportance sets the "importance" field.
func (_c *PlaceCreate) SetImportance(v float64) *PlaceCreate {
	_c.mutation.SetImportance(v)
	return _c
}

// SetNillableImportance sets the "importance" field if the given value is not nil.
func (_c *PlaceCreate) SetNillableImportance(v *float64) *PlaceCreate {
	if v != nil {
		_c.SetImportance(*v)
	}
	return _c
}

// SetDisplayName sets the "display_name" field.
func (_c *PlaceCreate) SetDisplayName(v string) *PlaceCreate {
	_c.mutation.SetDisplayName(v)
	return _c
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (_c *PlaceCreate) SetNillableDisplayName(v *string) *PlaceCreate {
	if v != nil {
		_c.SetDisplayName(*v)
	}
	return _c
}

// SetLat sets the "lat" field.
func (_c *PlaceCreate) SetLat(v float64) *PlaceCreate {
	_c.mutation.SetLat(v)
	return _c
}

// SetLon sets the "lon" field.
func (_c *PlaceCreate) SetLon(v float64) *PlaceCreate {
	_c.mutation.SetLon(v)
	return _c
}

// SetBboxSouth sets the "bbox_south" field.
func (_c *PlaceCreate) SetBboxSouth(v float64) *PlaceCreate {
	_c.mutation.SetBboxSouth(v)
	return _c
}

// SetNillableBboxSouth sets the "bbox_south" field if the given value is not nil.
func (_c *PlaceCreate) SetNillableBboxSouth(v *float64) *PlaceCreate {
	if v != nil {
		_c.SetBboxSouth(*v)
	}
	return _c
}

// SetBboxNorth sets the "bbox_north" field.
func (_c *PlaceCreate) SetBboxNorth(v float64) *PlaceCreate {
	_c.mutation.SetBboxNorth(v)
	return _c
}

// SetNillableBboxNorth sets the "bbox_north" field if the given value is not nil.
func (_c *PlaceCreate) SetNillableBboxNorth(v *float64) *PlaceCreate {
	if v != nil {
		_c.SetBboxNorth(*v)
	}
	return _c
}

// SetBboxWest sets the "bbox_west" field.
func (_c *PlaceCreate) SetBboxWest(v float64) *PlaceCreate {
	_c.mutation.SetBboxWest(v)
	return _c
}

// SetNillableBboxWest sets the "bbox_west" field if the given value is not nil.
func (_c *PlaceCreate) SetNillableBboxWest(v *float64) *PlaceCreate {
	if v != nil {
		_c.SetBboxWest(*v)
	}
	return _c
}

// SetBboxEast sets the "bbox_east" field.
func (_c *PlaceCreate) SetBboxEast(v float64) *PlaceCreate {
	_c.mutation.SetBboxEast(v)
	return _c
}

// SetNillableBboxEast sets the "bbox_east" field if the given value is not nil.
func (_c *PlaceCreate) SetNillableBboxEast(v *float64) *PlaceCreate {
	if v != nil {
		_c.SetBboxEast(*v)
	}
	return _c
}

// SetIcon sets the "icon" field.
func (_c *PlaceCreate) SetIcon(v string) *PlaceCreate {
	_c.mutation.SetIcon(v)
	return _c
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (_c *PlaceCreate) SetNillableIcon(v *string) *PlaceCreate {
	if v != nil {
		_c.SetIcon(*v)
	}
	return _c
}

// SetExtratags sets the "extratags" field.
func (_c *PlaceCreate) SetExtratags(v map[string]string) *PlaceCreate {
	_c.mutation.SetExtratags(v)
	return _c
}

// SetNamedetails sets the "namedetails" field.
func (_c *PlaceCreate) SetNamedetails(v map[string]string) *PlaceCreate {
	_c.mutation.SetNamedetails(v)
	return _c
}

// SetPolygonGeojson sets the "polygon_geojson" field.
func (_c *PlaceCreate) SetPolygonGeojson(v string) *PlaceCreate {
	_c.mutation.SetPolygonGeojson(v)
	return _c
}

// SetNillablePolygonGeojson sets the "polygon_geojson" field if the given value is not nil.
func (_c *PlaceCreate) SetNillablePolygonGeojson(v *string) *PlaceCreate {
	if v != nil {
		_c.SetPolygonGeojson(*v)
	}
	return _c
}

// AddAddressRowIDs adds the "address_rows" edge to the AddressRow entity by IDs.
func (_c *PlaceCreate) AddAddressRowIDs(ids ...int64) *PlaceCreate {
	_c.mutation.AddAddressRowIDs(ids...)
	return _c
}

// AddAddressRows adds the "address_rows" edges to the AddressRow entity.
func (_c *PlaceCreate) AddAddressRows(v ...*AddressRow) *PlaceCreate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddAddressRowIDs(ids...)
}

// Mutation returns the PlaceMutation object of the builder.
func (_c *PlaceCreate) Mutation() *PlaceMutation {
	return _c.mutation
}

// Save creates the Place in the database.
func (_c *PlaceCreate) Save(ctx context.Context) (*Place, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *PlaceCreate) SaveX(ctx context.Context) *Place {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *PlaceCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *PlaceCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *PlaceCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := place.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := place.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *PlaceCreate) check() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Place.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Place.updated_at"`)}
	}
	if _, ok := _c.mutation.PlaceID(); !ok {
		return &ValidationError{Name: "place_id", err: errors.New(`ent: missing required field "Place.place_id"`)}
	}
	if _, ok := _c.mutation.OsmID(); !ok {
		return &ValidationError{Name: "osm_id", err: errors.New(`ent: missing required field "Place.osm_id"`)}
	}
	if _, ok := _c.mutation.OsmType(); !ok {
		return &ValidationError{Name: "osm_type", err: errors.New(`ent: missing required field "Place.osm_type"`)}
	}
	if _, ok := _c.mutation.Lat(); !ok {
		return &ValidationError{Name: "lat", err: errors.New(`ent: missing required field "Place.lat"`)}
	}
	if _, ok := _c.mutation.Lon(); !ok {
		return &ValidationError{Name: "lon", err: errors.New(`ent: missing required field "Place.lon"`)}
	}
	return nil
}

func (_c *PlaceCreate) sqlSave(ctx context.Context) (*Place, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *PlaceCreate) createSpec() (*Place, *sqlgraph.CreateSpec) {
	var (
		_node = &Place{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(place.Table, sqlgraph.NewFieldSpec(place.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(place.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(place.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.PlaceID(); ok {
		_spec.SetField(place.FieldPlaceID, field.TypeInt64, value)
		_node.PlaceID = value
	}
	if value, ok := _c.mutation.Licence(); ok {
		_spec.SetField(place.FieldLicence, field.TypeString, value)
		_node.Licence = value
	}
	if value, ok := _c.mutation.OsmID(); ok {
		_spec.SetField(place.FieldOsmID, field.TypeString, value)
		_node.OsmID = value
	}
	if value, ok := _c.mutation.OsmType(); ok {
		_spec.SetField(place.FieldOsmType, field.TypeString, value)
		_node.OsmType = value
	}
	if value, ok := _c.mutation.Category(); ok {
		_spec.SetField(place.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := _c.mutation.GetType(); ok {
		_spec.SetField(place.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := _c.mutation.Importance(); ok {
		_spec.SetField(place.FieldImportance, field.TypeFloat64, value)
		_node.Importance = value
	}
	if value, ok := _c.mutation.DisplayName(); ok {
		_spec.SetField(place.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := _c.mutation.Lat(); ok {
		_spec.SetField(place.FieldLat, field.TypeFloat64, value)
		_node.Lat = value
	}
	if value, ok := _c.mutation.Lon(); ok {
		_spec.SetField(place.FieldLon, field.TypeFloat64, value)
		_node.Lon = value
	}
	if value, ok := _c.mutation.BboxSouth(); ok {
		_spec.SetField(place.FieldBboxSouth, field.TypeFloat64, value)
		_node.BboxSouth = value
	}
	if value, ok := _c.mutation.BboxNorth(); ok {
		_spec.SetField(place.FieldBboxNorth, field.TypeFloat64, value)
		_node.BboxNorth = value
	}
	if value, ok := _c.mutation.BboxWest(); ok {
		_spec.SetField(place.FieldBboxWest, field.TypeFloat64, value)
		_node.BboxWest = value
	}
	if value, ok := _c.mutation.BboxEast(); ok {
		_spec.SetField(place.FieldBboxEast, field.TypeFloat64, value)
		_node.BboxEast = value
	}
	if value, ok := _c.mutation.Icon(); ok {
		_spec.SetField(place.FieldIcon, field.TypeString, value)
		_node.Icon = value
	}
	if value, ok := _c.mutation.Extratags(); ok {
		_spec.SetField(place.FieldExtratags, field.TypeJSON, value)
		_node.Extratags = value
	}
	if value, ok := _c.mutation.Namedetails(); ok {
		_spec.SetField(place.FieldNamedetails, field.TypeJSON, value)
		_node.Namedetails = value
	}
	if value, ok := _c.mutation.PolygonGeojson(); ok {
		_spec.SetField(place.FieldPolygonGeojson, field.TypeString, value)
		_node.PolygonGeojson = value
	}
	if nodes := _c.mutation.AddressRowsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.AddressRowsTable,
			Columns: []string{place.AddressRowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addressrow.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Place.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PlaceUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *PlaceCreate) OnConflict(opts ...sql.ConflictOption) *PlaceUpsertOne {
	_c.conflict = opts
	return &PlaceUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Place.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *PlaceCreate) OnConflictColumns(columns ...string) *PlaceUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &PlaceUpsertOne{
		create: _c,
	}
}

type (
	// PlaceUpsertOne is the builder for "upsert"-ing
	//  one Place node.
	PlaceUpsertOne struct {
		create *PlaceCreate
	}

	// PlaceUpsert is the "OnConflict" setter.
	PlaceUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PlaceUpsert) SetUpdatedAt(v int64) *PlaceUpsert {
	u.Set(place.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PlaceUpsert) UpdateUpdatedAt() *PlaceUpsert {
	u.SetExcluded(place.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PlaceUpsert) AddUpdatedAt(v int64) *PlaceUpsert {
	u.Add(place.FieldUpdatedAt, v)
	return u
}

// SetPlaceID sets the "place_id" field.
func (u *PlaceUpsert) SetPlaceID(v int64) *PlaceUpsert {
	u.Set(place.FieldPlaceID, v)
	return u
}

// UpdatePlaceID sets the "place_id" field to the value that was provided on create.
func (u *PlaceUpsert) UpdatePlaceID() *PlaceUpsert {
	u.SetExcluded(place.FieldPlaceID)
	return u
}

// AddPlaceID adds v to the "place_id" field.
func (u *PlaceUpsert) AddPlaceID(v int64) *PlaceUpsert {
	u.Add(place.FieldPlaceID, v)
	return u
}

// SetLicence sets the "licence" field.
func (u *PlaceUpsert) SetLicence(v string) *PlaceUpsert {
	u.Set(place.FieldLicence, v)
	return u
}

// UpdateLicence sets the "licence" field to the value that was provided on create.
func (u *PlaceUpsert) UpdateLicence() *PlaceUpsert {
	u.SetExcluded(place.FieldLicence)
	return u
}

// ClearLicence clears the value of the "licence" field.
func (u *PlaceUpsert) ClearLicence() *PlaceUpsert {
	u.SetNull(place.FieldLicence)
	return u
}

// SetOsmID sets the "osm_id" field.
func (u *PlaceUpsert) SetOsmID(v string) *PlaceUpsert {
	u.Set(place.FieldOsmID, v)
	return u
}

// UpdateOsmID sets the "osm_id" field to the value that was provided on create.
func (u *PlaceUpsert) UpdateOsmID() *PlaceUpsert {
	u.SetExcluded(place.FieldOsmID)
	return u
}

// SetOsmType sets the "osm_type" field.
func (u *PlaceUpsert) SetOsmType(v string) *PlaceUpsert {
	u.Set(place.FieldOsmType, v)
	return u
}

// UpdateOsmType sets the "osm_type" field to the value that was provided on create.
func (u *PlaceUpsert) UpdateOsmType() *PlaceUpsert {
	u.SetExcluded(place.FieldOsmType)
	return u
}

// SetCategory sets the "category" field.
func (u *PlaceUpsert) SetCategory(v string) *PlaceUpsert {
	u.Set(place.FieldCategory, v)
	return u
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *PlaceUpsert) UpdateCategory() *PlaceUpsert {
	u.SetExcluded(place.FieldCategory)
	return u
}

// ClearCategory clears the value of the "category" field.
func (u *PlaceUpsert) ClearCategory() *PlaceUpsert {
	u.SetNull(place.FieldCategory)
	return u
}

// SetType sets the "type" field.
func (u *PlaceUpsert) SetType(v string) *PlaceUpsert {
	u.Set(place.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PlaceUpsert) UpdateType() *PlaceUpsert {
	u.SetExcluded(place.FieldType)
	return u
}

// ClearType clears the value of the "type" field.
func (u *PlaceUpsert) ClearType() *PlaceUpsert {
	u.SetNull(place.FieldType)
	return u
}

// SetImportance sets the "importance" field.
func (u *PlaceUpsert) SetImportance(v float64) *PlaceUpsert {
	u.Set(place.FieldImportance, v)
	return u
}

// UpdateImportance sets the "importance" field to the value that was provided on create.
func (u *PlaceUpsert) UpdateImportance() *PlaceUpsert {
	u.SetExcluded(place.FieldImportance)
	return u
}

// AddImportance adds v to the "importance" field.
func (u *PlaceUpsert) AddImportance(v float64) *PlaceUpsert {
	u.Add(place.FieldImportance, v)
	return u
}

// ClearImportance clears the value of the "importance" field.
func (u *PlaceUpsert) ClearImportance() *PlaceUpsert {
	u.SetNull(place.FieldImportance)
	return u
}

// SetDisplayName sets the "display_name" field.
func (u *PlaceUpsert) SetDisplayName(v string) *PlaceUpsert {
	u.Set(place.FieldDisplayName, v)
	return u
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *PlaceUpsert) UpdateDisplayName() *PlaceUpsert {
	u.SetExcluded(place.FieldDisplayName)
	return u
}

// ClearDisplayName clears the value of the "display_name" field.
func (u *PlaceUpsert) ClearDisplayName() *PlaceUpsert {
	u.SetNull(place.FieldDisplayName)
	return u
}

// SetLat sets the "lat" field.
func (u *PlaceUpsert) SetLat(v float64) *PlaceUpsert {
	u.Set(place.FieldLat, v)
	return u
}

// UpdateLat sets the "lat" field to the value that was provided on create.
func (u *PlaceUpsert) UpdateLat() *PlaceUpsert {
	u.SetExcluded(place.FieldLat)
	return u
}

// AddLat adds v to the "lat" field.
func (u *PlaceUpsert) AddLat(v float64) *PlaceUpsert {
	u.Add(place.FieldLat, v)
	return u
}

// SetLon sets the "lon" field.
func (u *PlaceUpsert) SetLon(v float64) *PlaceUpsert {
	u.Set(place.FieldLon, v)
	return u
}

// UpdateLon sets the "lon" field to the value that was provided on create.
func (u *PlaceUpsert) UpdateLon() *PlaceUpsert {
	u.SetExcluded(place.FieldLon)
	return u
}

// AddLon adds v to the "lon" field.
func (u *PlaceUpsert) AddLon(v float64) *PlaceUpsert {
	u.Add(place.FieldLon, v)
	return u
}

// SetBboxSouth sets the "bbox_south" field.
func (u *PlaceUpsert) SetBboxSouth(v float64) *PlaceUpsert {
	u.Set(place.FieldBboxSouth, v)
	return u
}

// UpdateBboxSouth sets the "bbox_south" field to the value that was provided on create.
func (u *PlaceUpsert) UpdateBboxSouth() *PlaceUpsert {
	u.SetExcluded(place.FieldBboxSouth)
	return u
}

// AddBboxSouth adds v to the "bbox_south" field.
func (u *PlaceUpsert) AddBboxSouth(v float64) *PlaceUpsert {
	u.Add(place.FieldBboxSouth, v)
	return u
}

// ClearBboxSouth clears the value of the "bbox_south" field.
func (u *PlaceUpsert) ClearBboxSouth() *PlaceUpsert {
	u.SetNull(place.FieldBboxSouth)
	return u
}

// SetBboxNorth sets the "bbox_north" field.
func (u *PlaceUpsert) SetBboxNorth(v float64) *PlaceUpsert {
	u.Set(place.FieldBboxNorth, v)
	return u
}

// UpdateBboxNorth sets the "bbox_north" field to the value that was provided on create.
func (u *PlaceUpsert) UpdateBboxNorth() *PlaceUpsert {
	u.SetExcluded(place.FieldBboxNorth)
	return u
}

// AddBboxNorth adds v to the "bbox_north" field.
func (u *PlaceUpsert) AddBboxNorth(v float64) *PlaceUpsert {
	u.Add(place.FieldBboxNorth, v)
	return u
}

// ClearBboxNorth clears the value of the "bbox_north" field.
func (u *PlaceUpsert) ClearBboxNorth() *PlaceUpsert {
	u.SetNull(place.FieldBboxNorth)
	return u
}

// SetBboxWest sets the "bbox_west" field.
func (u *PlaceUpsert) SetBboxWest(v float64) *PlaceUpsert {
	u.Set(place.FieldBboxWest, v)
	return u
}

// UpdateBboxWest sets the "bbox_west" field to the value that was provided on create.
func (u *PlaceUpsert) UpdateBboxWest() *PlaceUpsert {
	u.SetExcluded(place.FieldBboxWest)
	return u
}

// AddBboxWest adds v to the "bbox_west" field.
func (u *PlaceUpsert) AddBboxWest(v float64) *PlaceUpsert {
	u.Add(place.FieldBboxWest, v)
	return u
}

// ClearBboxWest clears the value of the "bbox_west" field.
func (u *PlaceUpsert) ClearBboxWest() *PlaceUpsert {
	u.SetNull(place.FieldBboxWest)
	return u
}

// SetBboxEast sets the "bbox_east" field.
func (u *PlaceUpsert) SetBboxEast(v float64) *PlaceUpsert {
	u.Set(place.FieldBboxEast, v)
	return u
}

// UpdateBboxEast sets the "bbox_east" field to the value that was provided on create.
func (u *PlaceUpsert) UpdateBboxEast() *PlaceUpsert {
	u.SetExcluded(place.FieldBboxEast)
	return u
}

// AddBboxEast adds v to the "bbox_east" field.
func (u *PlaceUpsert) AddBboxEast(v float64) *PlaceUpsert {
	u.Add(place.FieldBboxEast, v)
	return u
}

// ClearBboxEast clears the value of the "bbox_east" field.
func (u *PlaceUpsert) ClearBboxEast() *PlaceUpsert {
	u.SetNull(place.FieldBboxEast)
	return u
}

// SetIcon sets the "icon" field.
func (u *PlaceUpsert) SetIcon(v string) *PlaceUpsert {
	u.Set(place.FieldIcon, v)
	return u
}

// UpdateIcon sets the "icon" field to the value that was provided on create.
func (u *PlaceUpsert) UpdateIcon() *PlaceUpsert {
	u.SetExcluded(place.FieldIcon)
	return u
}

// ClearIcon clears the value of the "icon" field.
func (u *PlaceUpsert) ClearIcon() *PlaceUpsert {
	u.SetNull(place.FieldIcon)
	return u
}

// SetExtratags sets the "extratags" field.
func (u *PlaceUpsert) SetExtratags(v map[string]string) *PlaceUpsert {
	u.Set(place.FieldExtratags, v)
	return u
}

// UpdateExtratags sets the "extratags" field to the value that was provided on create.
func (u *PlaceUpsert) UpdateExtratags() *PlaceUpsert {
	u.SetExcluded(place.FieldExtratags)
	return u
}

// ClearExtratags clears the value of the "extratags" field.
func (u *PlaceUpsert) ClearExtratags() *PlaceUpsert {
	u.SetNull(place.FieldExtratags)
	return u
}

// SetNamedetails sets the "namedetails" field.
func (u *PlaceUpsert) SetNamedetails(v map[string]string) *PlaceUpsert {
	u.Set(place.FieldNamedetails, v)
	return u
}

// UpdateNamedetails sets the "namedetails" field to the value that was provided on create.
func (u *PlaceUpsert) UpdateNamedetails() *PlaceUpsert {
	u.SetExcluded(place.FieldNamedetails)
	return u
}

// ClearNamedetails clears the value of the "namedetails" field.
func (u *PlaceUpsert) ClearNamedetails() *PlaceUpsert {
	u.SetNull(place.FieldNamedetails)
	return u
}

// SetPolygonGeojson sets the "polygon_geojson" field.
func (u *PlaceUpsert) SetPolygonGeojson(v string) *PlaceUpsert {
	u.Set(place.FieldPolygonGeojson, v)
	return u
}

// UpdatePolygonGeojson sets the "polygon_geojson" field to the value that was provided on create.
func (u *PlaceUpsert) UpdatePolygonGeojson() *PlaceUpsert {
	u.SetExcluded(place.FieldPolygonGeojson)
	return u
}

// ClearPolygonGeojson clears the value of the "polygon_geojson" field.
func (u *PlaceUpsert) ClearPolygonGeojson() *PlaceUpsert {
	u.SetNull(place.FieldPolygonGeojson)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Place.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PlaceUpsertOne) UpdateNewValues() *PlaceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(place.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Place.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PlaceUpsertOne) Ignore() *PlaceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PlaceUpsertOne) DoNothing() *PlaceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PlaceCreate.OnConflict
// documentation for more info.
func (u *PlaceUpsertOne) Update(set func(*PlaceUpsert)) *PlaceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PlaceUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PlaceUpsertOne) SetUpdatedAt(v int64) *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PlaceUpsertOne) AddUpdatedAt(v int64) *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PlaceUpsertOne) UpdateUpdatedAt() *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetPlaceID sets the "place_id" field.
func (u *PlaceUpsertOne) SetPlaceID(v int64) *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.SetPlaceID(v)
	})
}

// AddPlaceID adds v to the "place_id" field.
func (u *PlaceUpsertOne) AddPlaceID(v int64) *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.AddPlaceID(v)
	})
}

// UpdatePlaceID sets the "place_id" field to the value that was provided on create.
func (u *PlaceUpsertOne) UpdatePlaceID() *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.UpdatePlaceID()
	})
}

// SetLicence sets the "licence" field.
func (u *PlaceUpsertOne) SetLicence(v string) *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.SetLicence(v)
	})
}

// UpdateLicence sets the "licence" field to the value that was provided on create.
func (u *PlaceUpsertOne) UpdateLicence() *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.UpdateLicence()
	})
}

// ClearLicence clears the value of the "licence" field.
func (u *PlaceUpsertOne) ClearLicence() *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.ClearLicence()
	})
}

// SetOsmID sets the "osm_id" field.
func (u *PlaceUpsertOne) SetOsmID(v string) *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.SetOsmID(v)
	})
}

// UpdateOsmID sets the "osm_id" field to the value that was provided on create.
func (u *PlaceUpsertOne) UpdateOsmID() *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.UpdateOsmID()
	})
}

// SetOsmType sets the "osm_type" field.
func (u *PlaceUpsertOne) SetOsmType(v string) *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.SetOsmType(v)
	})
}

// UpdateOsmType sets the "osm_type" field to the value that was provided on create.
func (u *PlaceUpsertOne) UpdateOsmType() *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.UpdateOsmType()
	})
}

// SetCategory sets the "category" field.
func (u *PlaceUpsertOne) SetCategory(v string) *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.SetCategory(v)
	})
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *PlaceUpsertOne) UpdateCategory() *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.UpdateCategory()
	})
}

// ClearCategory clears the value of the "category" field.
func (u *PlaceUpsertOne) ClearCategory() *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.ClearCategory()
	})
}

// SetType sets the "type" field.
func (u *PlaceUpsertOne) SetType(v string) *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PlaceUpsertOne) UpdateType() *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.UpdateType()
	})
}

// ClearType clears the value of the "type" field.
func (u *PlaceUpsertOne) ClearType() *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.ClearType()
	})
}

// SetImportance sets the "importance" field.
func (u *PlaceUpsertOne) SetImportance(v float64) *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.SetImportance(v)
	})
}

// AddImportance adds v to the "importance" field.
func (u *PlaceUpsertOne) AddImportance(v float64) *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.AddImportance(v)
	})
}

// UpdateImportance sets the "importance" field to the value that was provided on create.
func (u *PlaceUpsertOne) UpdateImportance() *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.UpdateImportance()
	})
}

// ClearImportance clears the value of the "importance" field.
func (u *PlaceUpsertOne) ClearImportance() *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.ClearImportance()
	})
}

// SetDisplayName sets the "display_name" field.
func (u *PlaceUpsertOne) SetDisplayName(v string) *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.SetDisplayName(v)
	})
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *PlaceUpsertOne) UpdateDisplayName() *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.UpdateDisplayName()
	})
}

// ClearDisplayName clears the value of the "display_name" field.
func (u *PlaceUpsertOne) ClearDisplayName() *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.ClearDisplayName()
	})
}

// SetLat sets the "lat" field.
func (u *PlaceUpsertOne) SetLat(v float64) *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.SetLat(v)
	})
}

// AddLat adds v to the "lat" field.
func (u *PlaceUpsertOne) AddLat(v float64) *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.AddLat(v)
	})
}

// UpdateLat sets the "lat" field to the value that was provided on create.
func (u *PlaceUpsertOne) UpdateLat() *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.UpdateLat()
	})
}

// SetLon sets the "lon" field.
func (u *PlaceUpsertOne) SetLon(v float64) *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.SetLon(v)
	})
}

// AddLon adds v to the "lon" field.
func (u *PlaceUpsertOne) AddLon(v float64) *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.AddLon(v)
	})
}

// UpdateLon sets the "lon" field to the value that was provided on create.
func (u *PlaceUpsertOne) UpdateLon() *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.UpdateLon()
	})
}

// SetBboxSouth sets the "bbox_south" field.
func (u *PlaceUpsertOne) SetBboxSouth(v float64) *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.SetBboxSouth(v)
	})
}

// AddBboxSouth adds v to the "bbox_south" field.
func (u *PlaceUpsertOne) AddBboxSouth(v float64) *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.AddBboxSouth(v)
	})
}

// UpdateBboxSouth sets the "bbox_south" field to the value that was provided on create.
func (u *PlaceUpsertOne) UpdateBboxSouth() *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.UpdateBboxSouth()
	})
}

// ClearBboxSouth clears the value of the "bbox_south" field.
func (u *PlaceUpsertOne) ClearBboxSouth() *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.ClearBboxSouth()
	})
}

// SetBboxNorth sets the "bbox_north" field.
func (u *PlaceUpsertOne) SetBboxNorth(v float64) *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.SetBboxNorth(v)
	})
}

// AddBboxNorth adds v to the "bbox_north" field.
func (u *PlaceUpsertOne) AddBboxNorth(v float64) *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.AddBboxNorth(v)
	})
}

// UpdateBboxNorth sets the "bbox_north" field to the value that was provided on create.
func (u *PlaceUpsertOne) UpdateBboxNorth() *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.UpdateBboxNorth()
	})
}

// ClearBboxNorth clears the value of the "bbox_north" field.
func (u *PlaceUpsertOne) ClearBboxNorth() *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.ClearBboxNorth()
	})
}

// SetBboxWest sets the "bbox_west" field.
func (u *PlaceUpsertOne) SetBboxWest(v float64) *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.SetBboxWest(v)
	})
}

// AddBboxWest adds v to the "bbox_west" field.
func (u *PlaceUpsertOne) AddBboxWest(v float64) *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.AddBboxWest(v)
	})
}

// UpdateBboxWest sets the "bbox_west" field to the value that was provided on create.
func (u *PlaceUpsertOne) UpdateBboxWest() *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.UpdateBboxWest()
	})
}

// ClearBboxWest clears the value of the "bbox_west" field.
func (u *PlaceUpsertOne) ClearBboxWest() *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.ClearBboxWest()
	})
}

// SetBboxEast sets the "bbox_east" field.
func (u *PlaceUpsertOne) SetBboxEast(v float64) *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.SetBboxEast(v)
	})
}

// AddBboxEast adds v to the "bbox_east" field.
func (u *PlaceUpsertOne) AddBboxEast(v float64) *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.AddBboxEast(v)
	})
}

// UpdateBboxEast sets the "bbox_east" field to the value that was provided on create.
func (u *PlaceUpsertOne) UpdateBboxEast() *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.UpdateBboxEast()
	})
}

// ClearBboxEast clears the value of the "bbox_east" field.
func (u *PlaceUpsertOne) ClearBboxEast() *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.ClearBboxEast()
	})
}

// SetIcon sets the "icon" field.
func (u *PlaceUpsertOne) SetIcon(v string) *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.SetIcon(v)
	})
}

// UpdateIcon sets the "icon" field to the value that was provided on create.
func (u *PlaceUpsertOne) UpdateIcon() *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.UpdateIcon()
	})
}

// ClearIcon clears the value of the "icon" field.
func (u *PlaceUpsertOne) ClearIcon() *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.ClearIcon()
	})
}

// SetExtratags sets the "extratags" field.
func (u *PlaceUpsertOne) SetExtratags(v map[string]string) *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.SetExtratags(v)
	})
}

// UpdateExtratags sets the "extratags" field to the value that was provided on create.
func (u *PlaceUpsertOne) UpdateExtratags() *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.UpdateExtratags()
	})
}

// ClearExtratags clears the value of the "extratags" field.
func (u *PlaceUpsertOne) ClearExtratags() *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.ClearExtratags()
	})
}

// SetNamedetails sets the "namedetails" field.
func (u *PlaceUpsertOne) SetNamedetails(v map[string]string) *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.SetNamedetails(v)
	})
}

// UpdateNamedetails sets the "namedetails" field to the value that was provided on create.
func (u *PlaceUpsertOne) UpdateNamedetails() *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.UpdateNamedetails()
	})
}

// ClearNamedetails clears the value of the "namedetails" field.
func (u *PlaceUpsertOne) ClearNamedetails() *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.ClearNamedetails()
	})
}

// SetPolygonGeojson sets the "polygon_geojson" field.
func (u *PlaceUpsertOne) SetPolygonGeojson(v string) *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.SetPolygonGeojson(v)
	})
}

// UpdatePolygonGeojson sets the "polygon_geojson" field to the value that was provided on create.
func (u *PlaceUpsertOne) UpdatePolygonGeojson() *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.UpdatePolygonGeojson()
	})
}

// ClearPolygonGeojson clears the value of the "polygon_geojson" field.
func (u *PlaceUpsertOne) ClearPolygonGeojson() *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.ClearPolygonGeojson()
	})
}

// Exec executes the query.
func (u *PlaceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PlaceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PlaceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PlaceUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PlaceUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PlaceCreateBulk is the builder for creating many Place entities in bulk.
type PlaceCreateBulk struct {
	config
	err      error
	builders []*PlaceCreate
	conflict []sql.ConflictOption
}

// Save creates the Place entities in the database.
func (_c *PlaceCreateBulk) Save(ctx context.Context) ([]*Place, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Place, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlaceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *PlaceCreateBulk) SaveX(ctx context.Context) []*Place {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *PlaceCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *PlaceCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Place.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PlaceUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *PlaceCreateBulk) OnConflict(opts ...sql.ConflictOption) *PlaceUpsertBulk {
	_c.conflict = opts
	return &PlaceUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Place.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *PlaceCreateBulk) OnConflictColumns(columns ...string) *PlaceUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &PlaceUpsertBulk{
		create: _c,
	}
}

// PlaceUpsertBulk is the builder for "upsert"-ing
// a bulk of Place nodes.
type PlaceUpsertBulk struct {
	create *PlaceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Place.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PlaceUpsertBulk) UpdateNewValues() *PlaceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(place.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Place.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PlaceUpsertBulk) Ignore() *PlaceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PlaceUpsertBulk) DoNothing() *PlaceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PlaceCreateBulk.OnConflict
// documentation for more info.
func (u *PlaceUpsertBulk) Update(set func(*PlaceUpsert)) *PlaceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PlaceUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PlaceUpsertBulk) SetUpdatedAt(v int64) *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PlaceUpsertBulk) AddUpdatedAt(v int64) *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PlaceUpsertBulk) UpdateUpdatedAt() *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetPlaceID sets the "place_id" field.
func (u *PlaceUpsertBulk) SetPlaceID(v int64) *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.SetPlaceID(v)
	})
}

// AddPlaceID adds v to the "place_id" field.
func (u *PlaceUpsertBulk) AddPlaceID(v int64) *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.AddPlaceID(v)
	})
}

// UpdatePlaceID sets the "place_id" field to the value that was provided on create.
func (u *PlaceUpsertBulk) UpdatePlaceID() *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.UpdatePlaceID()
	})
}

// SetLicence sets the "licence" field.
func (u *PlaceUpsertBulk) SetLicence(v string) *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.SetLicence(v)
	})
}

// UpdateLicence sets the "licence" field to the value that was provided on create.
func (u *PlaceUpsertBulk) UpdateLicence() *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.UpdateLicence()
	})
}

// ClearLicence clears the value of the "licence" field.
func (u *PlaceUpsertBulk) ClearLicence() *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.ClearLicence()
	})
}

// SetOsmID sets the "osm_id" field.
func (u *PlaceUpsertBulk) SetOsmID(v string) *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.SetOsmID(v)
	})
}

// UpdateOsmID sets the "osm_id" field to the value that was provided on create.
func (u *PlaceUpsertBulk) UpdateOsmID() *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.UpdateOsmID()
	})
}

// SetOsmType sets the "osm_type" field.
func (u *PlaceUpsertBulk) SetOsmType(v string) *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.SetOsmType(v)
	})
}

// UpdateOsmType sets the "osm_type" field to the value that was provided on create.
func (u *PlaceUpsertBulk) UpdateOsmType() *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.UpdateOsmType()
	})
}

// SetCategory sets the "category" field.
func (u *PlaceUpsertBulk) SetCategory(v string) *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.SetCategory(v)
	})
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *PlaceUpsertBulk) UpdateCategory() *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.UpdateCategory()
	})
}

// ClearCategory clears the value of the "category" field.
func (u *PlaceUpsertBulk) ClearCategory() *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.ClearCategory()
	})
}

// SetType sets the "type" field.
func (u *PlaceUpsertBulk) SetType(v string) *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PlaceUpsertBulk) UpdateType() *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.UpdateType()
	})
}

// ClearType clears the value of the "type" field.
func (u *PlaceUpsertBulk) ClearType() *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.ClearType()
	})
}

// SetImportance sets the "importance" field.
func (u *PlaceUpsertBulk) SetImportance(v float64) *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.SetImportance(v)
	})
}

// AddImportance adds v to the "importance" field.
func (u *PlaceUpsertBulk) AddImportance(v float64) *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.AddImportance(v)
	})
}

// UpdateImportance sets the "importance" field to the value that was provided on create.
func (u *PlaceUpsertBulk) UpdateImportance() *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.UpdateImportance()
	})
}

// ClearImportance clears the value of the "importance" field.
func (u *PlaceUpsertBulk) ClearImportance() *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.ClearImportance()
	})
}

// SetDisplayName sets the "display_name" field.
func (u *PlaceUpsertBulk) SetDisplayName(v string) *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.SetDisplayName(v)
	})
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *PlaceUpsertBulk) UpdateDisplayName() *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.UpdateDisplayName()
	})
}

// ClearDisplayName clears the value of the "display_name" field.
func (u *PlaceUpsertBulk) ClearDisplayName() *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.ClearDisplayName()
	})
}

// SetLat sets the "lat" field.
func (u *PlaceUpsertBulk) SetLat(v float64) *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.SetLat(v)
	})
}

// AddLat adds v to the "lat" field.
func (u *PlaceUpsertBulk) AddLat(v float64) *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.AddLat(v)
	})
}

// UpdateLat sets the "lat" field to the value that was provided on create.
func (u *PlaceUpsertBulk) UpdateLat() *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.UpdateLat()
	})
}

// SetLon sets the "lon" field.
func (u *PlaceUpsertBulk) SetLon(v float64) *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.SetLon(v)
	})
}

// AddLon adds v to the "lon" field.
func (u *PlaceUpsertBulk) AddLon(v float64) *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.AddLon(v)
	})
}

// UpdateLon sets the "lon" field to the value that was provided on create.
func (u *PlaceUpsertBulk) UpdateLon() *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.UpdateLon()
	})
}

// SetBboxSouth sets the "bbox_south" field.
func (u *PlaceUpsertBulk) SetBboxSouth(v float64) *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.SetBboxSouth(v)
	})
}

// AddBboxSouth adds v to the "bbox_south" field.
func (u *PlaceUpsertBulk) AddBboxSouth(v float64) *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.AddBboxSouth(v)
	})
}

// UpdateBboxSouth sets the "bbox_south" field to the value that was provided on create.
func (u *PlaceUpsertBulk) UpdateBboxSouth() *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.UpdateBboxSouth()
	})
}

// ClearBboxSouth clears the value of the "bbox_south" field.
func (u *PlaceUpsertBulk) ClearBboxSouth() *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.ClearBboxSouth()
	})
}

// SetBboxNorth sets the "bbox_north" field.
func (u *PlaceUpsertBulk) SetBboxNorth(v float64) *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.SetBboxNorth(v)
	})
}

// AddBboxNorth adds v to the "bbox_north" field.
func (u *PlaceUpsertBulk) AddBboxNorth(v float64) *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.AddBboxNorth(v)
	})
}

// UpdateBboxNorth sets the "bbox_north" field to the value that was provided on create.
func (u *PlaceUpsertBulk) UpdateBboxNorth() *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.UpdateBboxNorth()
	})
}

// ClearBboxNorth clears the value of the "bbox_north" field.
func (u *PlaceUpsertBulk) ClearBboxNorth() *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.ClearBboxNorth()
	})
}

// SetBboxWest sets the "bbox_west" field.
func (u *PlaceUpsertBulk) SetBboxWest(v float64) *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.SetBboxWest(v)
	})
}

// AddBboxWest adds v to the "bbox_west" field.
func (u *PlaceUpsertBulk) AddBboxWest(v float64) *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.AddBboxWest(v)
	})
}

// UpdateBboxWest sets the "bbox_west" field to the value that was provided on create.
func (u *PlaceUpsertBulk) UpdateBboxWest() *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.UpdateBboxWest()
	})
}

// ClearBboxWest clears the value of the "bbox_west" field.
func (u *PlaceUpsertBulk) ClearBboxWest() *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.ClearBboxWest()
	})
}

// SetBboxEast sets the "bbox_east" field.
func (u *PlaceUpsertBulk) SetBboxEast(v float64) *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.SetBboxEast(v)
	})
}

// AddBboxEast adds v to the "bbox_east" field.
func (u *PlaceUpsertBulk) AddBboxEast(v float64) *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.AddBboxEast(v)
	})
}

// UpdateBboxEast sets the "bbox_east" field to the value that was provided on create.
func (u *PlaceUpsertBulk) UpdateBboxEast() *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.UpdateBboxEast()
	})
}

// ClearBboxEast clears the value of the "bbox_east" field.
func (u *PlaceUpsertBulk) ClearBboxEast() *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.ClearBboxEast()
	})
}

// SetIcon sets the "icon" field.
func (u *PlaceUpsertBulk) SetIcon(v string) *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.SetIcon(v)
	})
}

// UpdateIcon sets the "icon" field to the value that was provided on create.
func (u *PlaceUpsertBulk) UpdateIcon() *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.UpdateIcon()
	})
}

// ClearIcon clears the value of the "icon" field.
func (u *PlaceUpsertBulk) ClearIcon() *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.ClearIcon()
	})
}

// SetExtratags sets the "extratags" field.
func (u *PlaceUpsertBulk) SetExtratags(v map[string]string) *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.SetExtratags(v)
	})
}

// UpdateExtratags sets the "extratags" field to the value that was provided on create.
func (u *PlaceUpsertBulk) UpdateExtratags() *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.UpdateExtratags()
	})
}

// ClearExtratags clears the value of the "extratags" field.
func (u *PlaceUpsertBulk) ClearExtratags() *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.ClearExtratags()
	})
}

// SetNamedetails sets the "namedetails" field.
func (u *PlaceUpsertBulk) SetNamedetails(v map[string]string) *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.SetNamedetails(v)
	})
}

// UpdateNamedetails sets the "namedetails" field to the value that was provided on create.
func (u *PlaceUpsertBulk) UpdateNamedetails() *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.UpdateNamedetails()
	})
}

// ClearNamedetails clears the value of the "namedetails" field.
func (u *PlaceUpsertBulk) ClearNamedetails() *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.ClearNamedetails()
	})
}

// SetPolygonGeojson sets the "polygon_geojson" field.
func (u *PlaceUpsertBulk) SetPolygonGeojson(v string) *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.SetPolygonGeojson(v)
	})
}

// UpdatePolygonGeojson sets the "polygon_geojson" field to the value that was provided on create.
func (u *PlaceUpsertBulk) UpdatePolygonGeojson() *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.UpdatePolygonGeojson()
	})
}

// ClearPolygonGeojson clears the value of the "polygon_geojson" field.
func (u *PlaceUpsertBulk) ClearPolygonGeojson() *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.ClearPolygonGeojson()
	})
}

// Exec executes the query.
func (u *PlaceUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PlaceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PlaceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PlaceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
