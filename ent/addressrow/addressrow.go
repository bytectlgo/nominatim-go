// Code generated by ent, DO NOT EDIT.

package addressrow

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the addressrow type in the database.
	Label = "address_row"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldComponent holds the string denoting the component field in the database.
	FieldComponent = "component"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldAdminLevel holds the string denoting the admin_level field in the database.
	FieldAdminLevel = "admin_level"
	// FieldRank holds the string denoting the rank field in the database.
	FieldRank = "rank"
	// EdgePlace holds the string denoting the place edge name in mutations.
	EdgePlace = "place"
	// Table holds the table name of the addressrow in the database.
	Table = "address_rows"
	// PlaceTable is the table that holds the place relation/edge.
	PlaceTable = "address_rows"
	// PlaceInverseTable is the table name for the Place entity.
	// It exists in this package in order to avoid circular dependency with the "place" package.
	PlaceInverseTable = "places"
	// PlaceColumn is the table column denoting the place relation/edge.
	PlaceColumn = "place_address_rows"
)

// Columns holds all SQL columns for addressrow fields.
var Columns = []string{
	FieldID,
	FieldComponent,
	FieldName,
	FieldAdminLevel,
	FieldRank,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "address_rows"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"place_address_rows",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultRank holds the default value on creation for the "rank" field.
	DefaultRank uint32
)

// OrderOption defines the ordering options for the AddressRow queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByComponent orders the results by the component field.
func ByComponent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComponent, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByAdminLevel orders the results by the admin_level field.
func ByAdminLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAdminLevel, opts...).ToFunc()
}

// ByRank orders the results by the rank field.
func ByRank(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRank, opts...).ToFunc()
}

// ByPlaceField orders the results by place field.
func ByPlaceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlaceStep(), sql.OrderByField(field, opts...))
	}
}
func newPlaceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlaceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PlaceTable, PlaceColumn),
	)
}

// 结构体字段转表字段map
var StructToFieldMap = map[string]string{
	"id":         FieldID,
	"component":  FieldComponent,
	"name":       FieldName,
	"adminLevel": FieldAdminLevel,
	"rank":       FieldRank,
}
