// Code generated by ent, DO NOT EDIT.

package addressrow

import (
	"nominatim-go/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldEQ(FieldUpdatedAt, v))
}

// Component applies equality check predicate on the "component" field. It's identical to ComponentEQ.
func Component(v string) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldEQ(FieldComponent, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldEQ(FieldName, v))
}

// AdminLevel applies equality check predicate on the "admin_level" field. It's identical to AdminLevelEQ.
func AdminLevel(v uint32) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldEQ(FieldAdminLevel, v))
}

// Rank applies equality check predicate on the "rank" field. It's identical to RankEQ.
func Rank(v uint32) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldEQ(FieldRank, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v int64) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v int64) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...int64) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...int64) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v int64) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v int64) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v int64) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v int64) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v int64) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v int64) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...int64) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...int64) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v int64) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v int64) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v int64) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v int64) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldLTE(FieldUpdatedAt, v))
}

// ComponentEQ applies the EQ predicate on the "component" field.
func ComponentEQ(v string) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldEQ(FieldComponent, v))
}

// ComponentNEQ applies the NEQ predicate on the "component" field.
func ComponentNEQ(v string) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldNEQ(FieldComponent, v))
}

// ComponentIn applies the In predicate on the "component" field.
func ComponentIn(vs ...string) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldIn(FieldComponent, vs...))
}

// ComponentNotIn applies the NotIn predicate on the "component" field.
func ComponentNotIn(vs ...string) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldNotIn(FieldComponent, vs...))
}

// ComponentGT applies the GT predicate on the "component" field.
func ComponentGT(v string) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldGT(FieldComponent, v))
}

// ComponentGTE applies the GTE predicate on the "component" field.
func ComponentGTE(v string) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldGTE(FieldComponent, v))
}

// ComponentLT applies the LT predicate on the "component" field.
func ComponentLT(v string) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldLT(FieldComponent, v))
}

// ComponentLTE applies the LTE predicate on the "component" field.
func ComponentLTE(v string) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldLTE(FieldComponent, v))
}

// ComponentContains applies the Contains predicate on the "component" field.
func ComponentContains(v string) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldContains(FieldComponent, v))
}

// ComponentHasPrefix applies the HasPrefix predicate on the "component" field.
func ComponentHasPrefix(v string) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldHasPrefix(FieldComponent, v))
}

// ComponentHasSuffix applies the HasSuffix predicate on the "component" field.
func ComponentHasSuffix(v string) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldHasSuffix(FieldComponent, v))
}

// ComponentEqualFold applies the EqualFold predicate on the "component" field.
func ComponentEqualFold(v string) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldEqualFold(FieldComponent, v))
}

// ComponentContainsFold applies the ContainsFold predicate on the "component" field.
func ComponentContainsFold(v string) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldContainsFold(FieldComponent, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldContainsFold(FieldName, v))
}

// AdminLevelEQ applies the EQ predicate on the "admin_level" field.
func AdminLevelEQ(v uint32) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldEQ(FieldAdminLevel, v))
}

// AdminLevelNEQ applies the NEQ predicate on the "admin_level" field.
func AdminLevelNEQ(v uint32) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldNEQ(FieldAdminLevel, v))
}

// AdminLevelIn applies the In predicate on the "admin_level" field.
func AdminLevelIn(vs ...uint32) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldIn(FieldAdminLevel, vs...))
}

// AdminLevelNotIn applies the NotIn predicate on the "admin_level" field.
func AdminLevelNotIn(vs ...uint32) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldNotIn(FieldAdminLevel, vs...))
}

// AdminLevelGT applies the GT predicate on the "admin_level" field.
func AdminLevelGT(v uint32) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldGT(FieldAdminLevel, v))
}

// AdminLevelGTE applies the GTE predicate on the "admin_level" field.
func AdminLevelGTE(v uint32) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldGTE(FieldAdminLevel, v))
}

// AdminLevelLT applies the LT predicate on the "admin_level" field.
func AdminLevelLT(v uint32) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldLT(FieldAdminLevel, v))
}

// AdminLevelLTE applies the LTE predicate on the "admin_level" field.
func AdminLevelLTE(v uint32) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldLTE(FieldAdminLevel, v))
}

// AdminLevelIsNil applies the IsNil predicate on the "admin_level" field.
func AdminLevelIsNil() predicate.AddressRow {
	return predicate.AddressRow(sql.FieldIsNull(FieldAdminLevel))
}

// AdminLevelNotNil applies the NotNil predicate on the "admin_level" field.
func AdminLevelNotNil() predicate.AddressRow {
	return predicate.AddressRow(sql.FieldNotNull(FieldAdminLevel))
}

// RankEQ applies the EQ predicate on the "rank" field.
func RankEQ(v uint32) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldEQ(FieldRank, v))
}

// RankNEQ applies the NEQ predicate on the "rank" field.
func RankNEQ(v uint32) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldNEQ(FieldRank, v))
}

// RankIn applies the In predicate on the "rank" field.
func RankIn(vs ...uint32) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldIn(FieldRank, vs...))
}

// RankNotIn applies the NotIn predicate on the "rank" field.
func RankNotIn(vs ...uint32) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldNotIn(FieldRank, vs...))
}

// RankGT applies the GT predicate on the "rank" field.
func RankGT(v uint32) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldGT(FieldRank, v))
}

// RankGTE applies the GTE predicate on the "rank" field.
func RankGTE(v uint32) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldGTE(FieldRank, v))
}

// RankLT applies the LT predicate on the "rank" field.
func RankLT(v uint32) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldLT(FieldRank, v))
}

// RankLTE applies the LTE predicate on the "rank" field.
func RankLTE(v uint32) predicate.AddressRow {
	return predicate.AddressRow(sql.FieldLTE(FieldRank, v))
}

// HasPlace applies the HasEdge predicate on the "place" edge.
func HasPlace() predicate.AddressRow {
	return predicate.AddressRow(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PlaceTable, PlaceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlaceWith applies the HasEdge predicate on the "place" edge with a given conditions (other predicates).
func HasPlaceWith(preds ...predicate.Place) predicate.AddressRow {
	return predicate.AddressRow(func(s *sql.Selector) {
		step := newPlaceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AddressRow) predicate.AddressRow {
	return predicate.AddressRow(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AddressRow) predicate.AddressRow {
	return predicate.AddressRow(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AddressRow) predicate.AddressRow {
	return predicate.AddressRow(sql.NotPredicates(p))
}
