// Code generated by ent, DO NOT EDIT.

package place

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the place type in the database.
	Label = "place"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPlaceID holds the string denoting the place_id field in the database.
	FieldPlaceID = "place_id"
	// FieldLicence holds the string denoting the licence field in the database.
	FieldLicence = "licence"
	// FieldOsmID holds the string denoting the osm_id field in the database.
	FieldOsmID = "osm_id"
	// FieldOsmType holds the string denoting the osm_type field in the database.
	FieldOsmType = "osm_type"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldImportance holds the string denoting the importance field in the database.
	FieldImportance = "importance"
	// FieldDisplayName holds the string denoting the display_name field in the database.
	FieldDisplayName = "display_name"
	// FieldLat holds the string denoting the lat field in the database.
	FieldLat = "lat"
	// FieldLon holds the string denoting the lon field in the database.
	FieldLon = "lon"
	// FieldBboxSouth holds the string denoting the bbox_south field in the database.
	FieldBboxSouth = "bbox_south"
	// FieldBboxNorth holds the string denoting the bbox_north field in the database.
	FieldBboxNorth = "bbox_north"
	// FieldBboxWest holds the string denoting the bbox_west field in the database.
	FieldBboxWest = "bbox_west"
	// FieldBboxEast holds the string denoting the bbox_east field in the database.
	FieldBboxEast = "bbox_east"
	// FieldIcon holds the string denoting the icon field in the database.
	FieldIcon = "icon"
	// FieldExtratags holds the string denoting the extratags field in the database.
	FieldExtratags = "extratags"
	// FieldNamedetails holds the string denoting the namedetails field in the database.
	FieldNamedetails = "namedetails"
	// FieldPolygonGeojson holds the string denoting the polygon_geojson field in the database.
	FieldPolygonGeojson = "polygon_geojson"
	// EdgeAddressRows holds the string denoting the address_rows edge name in mutations.
	EdgeAddressRows = "address_rows"
	// Table holds the table name of the place in the database.
	Table = "places"
	// AddressRowsTable is the table that holds the address_rows relation/edge.
	AddressRowsTable = "address_rows"
	// AddressRowsInverseTable is the table name for the AddressRow entity.
	// It exists in this package in order to avoid circular dependency with the "addressrow" package.
	AddressRowsInverseTable = "address_rows"
	// AddressRowsColumn is the table column denoting the address_rows relation/edge.
	AddressRowsColumn = "place_address_rows"
)

// Columns holds all SQL columns for place fields.
var Columns = []string{
	FieldID,
	FieldPlaceID,
	FieldLicence,
	FieldOsmID,
	FieldOsmType,
	FieldCategory,
	FieldType,
	FieldImportance,
	FieldDisplayName,
	FieldLat,
	FieldLon,
	FieldBboxSouth,
	FieldBboxNorth,
	FieldBboxWest,
	FieldBboxEast,
	FieldIcon,
	FieldExtratags,
	FieldNamedetails,
	FieldPolygonGeojson,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Place queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPlaceID orders the results by the place_id field.
func ByPlaceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlaceID, opts...).ToFunc()
}

// ByLicence orders the results by the licence field.
func ByLicence(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLicence, opts...).ToFunc()
}

// ByOsmID orders the results by the osm_id field.
func ByOsmID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOsmID, opts...).ToFunc()
}

// ByOsmType orders the results by the osm_type field.
func ByOsmType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOsmType, opts...).ToFunc()
}

// ByCategory orders the results by the category field.
func ByCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategory, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByImportance orders the results by the importance field.
func ByImportance(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImportance, opts...).ToFunc()
}

// ByDisplayName orders the results by the display_name field.
func ByDisplayName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayName, opts...).ToFunc()
}

// ByLat orders the results by the lat field.
func ByLat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLat, opts...).ToFunc()
}

// ByLon orders the results by the lon field.
func ByLon(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLon, opts...).ToFunc()
}

// ByBboxSouth orders the results by the bbox_south field.
func ByBboxSouth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBboxSouth, opts...).ToFunc()
}

// ByBboxNorth orders the results by the bbox_north field.
func ByBboxNorth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBboxNorth, opts...).ToFunc()
}

// ByBboxWest orders the results by the bbox_west field.
func ByBboxWest(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBboxWest, opts...).ToFunc()
}

// ByBboxEast orders the results by the bbox_east field.
func ByBboxEast(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBboxEast, opts...).ToFunc()
}

// ByIcon orders the results by the icon field.
func ByIcon(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIcon, opts...).ToFunc()
}

// ByPolygonGeojson orders the results by the polygon_geojson field.
func ByPolygonGeojson(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPolygonGeojson, opts...).ToFunc()
}

// ByAddressRowsCount orders the results by address_rows count.
func ByAddressRowsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAddressRowsStep(), opts...)
	}
}

// ByAddressRows orders the results by address_rows terms.
func ByAddressRows(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAddressRowsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAddressRowsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AddressRowsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AddressRowsTable, AddressRowsColumn),
	)
}

// 结构体字段转表字段map
var StructToFieldMap = map[string]string{
	"id":             FieldID,
	"placeID":        FieldPlaceID,
	"licence":        FieldLicence,
	"osmID":          FieldOsmID,
	"osmType":        FieldOsmType,
	"category":       FieldCategory,
	"type":           FieldType,
	"importance":     FieldImportance,
	"displayName":    FieldDisplayName,
	"lat":            FieldLat,
	"lon":            FieldLon,
	"bboxSouth":      FieldBboxSouth,
	"bboxNorth":      FieldBboxNorth,
	"bboxWest":       FieldBboxWest,
	"bboxEast":       FieldBboxEast,
	"icon":           FieldIcon,
	"extratags":      FieldExtratags,
	"namedetails":    FieldNamedetails,
	"polygonGeojson": FieldPolygonGeojson,
}
