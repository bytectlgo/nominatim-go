// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"nominatim-go/ent/place"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Place is the model entity for the Place schema.
type Place struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 创建时间,unix时间戳
	CreatedAt int64 `json:"created_at,omitempty"`
	// 更新时间,unix时间戳
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// PlaceID holds the value of the "place_id" field.
	PlaceID int64 `json:"place_id,omitempty"`
	// Licence holds the value of the "licence" field.
	Licence string `json:"licence,omitempty"`
	// OsmID holds the value of the "osm_id" field.
	OsmID string `json:"osm_id,omitempty"`
	// OsmType holds the value of the "osm_type" field.
	OsmType string `json:"osm_type,omitempty"`
	// Category holds the value of the "category" field.
	Category string `json:"category,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Importance holds the value of the "importance" field.
	Importance float64 `json:"importance,omitempty"`
	// DisplayName holds the value of the "display_name" field.
	DisplayName string `json:"display_name,omitempty"`
	// Lat holds the value of the "lat" field.
	Lat float64 `json:"lat,omitempty"`
	// Lon holds the value of the "lon" field.
	Lon float64 `json:"lon,omitempty"`
	// BboxSouth holds the value of the "bbox_south" field.
	BboxSouth float64 `json:"bbox_south,omitempty"`
	// BboxNorth holds the value of the "bbox_north" field.
	BboxNorth float64 `json:"bbox_north,omitempty"`
	// BboxWest holds the value of the "bbox_west" field.
	BboxWest float64 `json:"bbox_west,omitempty"`
	// BboxEast holds the value of the "bbox_east" field.
	BboxEast float64 `json:"bbox_east,omitempty"`
	// Icon holds the value of the "icon" field.
	Icon string `json:"icon,omitempty"`
	// Extratags holds the value of the "extratags" field.
	Extratags map[string]string `json:"extratags,omitempty"`
	// Namedetails holds the value of the "namedetails" field.
	Namedetails map[string]string `json:"namedetails,omitempty"`
	// PolygonGeojson holds the value of the "polygon_geojson" field.
	PolygonGeojson string `json:"polygon_geojson,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PlaceQuery when eager-loading is set.
	Edges        PlaceEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PlaceEdges holds the relations/edges for other nodes in the graph.
type PlaceEdges struct {
	// AddressRows holds the value of the address_rows edge.
	AddressRows []*AddressRow `json:"address_rows,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AddressRowsOrErr returns the AddressRows value or an error if the edge
// was not loaded in eager-loading.
func (e PlaceEdges) AddressRowsOrErr() ([]*AddressRow, error) {
	if e.loadedTypes[0] {
		return e.AddressRows, nil
	}
	return nil, &NotLoadedError{edge: "address_rows"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Place) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case place.FieldExtratags, place.FieldNamedetails:
			values[i] = new([]byte)
		case place.FieldImportance, place.FieldLat, place.FieldLon, place.FieldBboxSouth, place.FieldBboxNorth, place.FieldBboxWest, place.FieldBboxEast:
			values[i] = new(sql.NullFloat64)
		case place.FieldID, place.FieldCreatedAt, place.FieldUpdatedAt, place.FieldPlaceID:
			values[i] = new(sql.NullInt64)
		case place.FieldLicence, place.FieldOsmID, place.FieldOsmType, place.FieldCategory, place.FieldType, place.FieldDisplayName, place.FieldIcon, place.FieldPolygonGeojson:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Place fields.
func (_m *Place) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case place.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case place.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Int64
			}
		case place.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Int64
			}
		case place.FieldPlaceID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field place_id", values[i])
			} else if value.Valid {
				_m.PlaceID = value.Int64
			}
		case place.FieldLicence:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field licence", values[i])
			} else if value.Valid {
				_m.Licence = value.String
			}
		case place.FieldOsmID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field osm_id", values[i])
			} else if value.Valid {
				_m.OsmID = value.String
			}
		case place.FieldOsmType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field osm_type", values[i])
			} else if value.Valid {
				_m.OsmType = value.String
			}
		case place.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				_m.Category = value.String
			}
		case place.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				_m.Type = value.String
			}
		case place.FieldImportance:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field importance", values[i])
			} else if value.Valid {
				_m.Importance = value.Float64
			}
		case place.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				_m.DisplayName = value.String
			}
		case place.FieldLat:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field lat", values[i])
			} else if value.Valid {
				_m.Lat = value.Float64
			}
		case place.FieldLon:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field lon", values[i])
			} else if value.Valid {
				_m.Lon = value.Float64
			}
		case place.FieldBboxSouth:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field bbox_south", values[i])
			} else if value.Valid {
				_m.BboxSouth = value.Float64
			}
		case place.FieldBboxNorth:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field bbox_north", values[i])
			} else if value.Valid {
				_m.BboxNorth = value.Float64
			}
		case place.FieldBboxWest:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field bbox_west", values[i])
			} else if value.Valid {
				_m.BboxWest = value.Float64
			}
		case place.FieldBboxEast:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field bbox_east", values[i])
			} else if value.Valid {
				_m.BboxEast = value.Float64
			}
		case place.FieldIcon:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field icon", values[i])
			} else if value.Valid {
				_m.Icon = value.String
			}
		case place.FieldExtratags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field extratags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Extratags); err != nil {
					return fmt.Errorf("unmarshal field extratags: %w", err)
				}
			}
		case place.FieldNamedetails:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field namedetails", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Namedetails); err != nil {
					return fmt.Errorf("unmarshal field namedetails: %w", err)
				}
			}
		case place.FieldPolygonGeojson:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field polygon_geojson", values[i])
			} else if value.Valid {
				_m.PolygonGeojson = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Place.
// This includes values selected through modifiers, order, etc.
func (_m *Place) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryAddressRows queries the "address_rows" edge of the Place entity.
func (_m *Place) QueryAddressRows() *AddressRowQuery {
	return NewPlaceClient(_m.config).QueryAddressRows(_m)
}

// Update returns a builder for updating this Place.
// Note that you need to call Place.Unwrap() before calling this method if this Place
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Place) Update() *PlaceUpdateOne {
	return NewPlaceClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Place entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Place) Unwrap() *Place {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Place is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Place) String() string {
	var builder strings.Builder
	builder.WriteString("Place(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", _m.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", _m.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("place_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.PlaceID))
	builder.WriteString(", ")
	builder.WriteString("licence=")
	builder.WriteString(_m.Licence)
	builder.WriteString(", ")
	builder.WriteString("osm_id=")
	builder.WriteString(_m.OsmID)
	builder.WriteString(", ")
	builder.WriteString("osm_type=")
	builder.WriteString(_m.OsmType)
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(_m.Category)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(_m.Type)
	builder.WriteString(", ")
	builder.WriteString("importance=")
	builder.WriteString(fmt.Sprintf("%v", _m.Importance))
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(_m.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("lat=")
	builder.WriteString(fmt.Sprintf("%v", _m.Lat))
	builder.WriteString(", ")
	builder.WriteString("lon=")
	builder.WriteString(fmt.Sprintf("%v", _m.Lon))
	builder.WriteString(", ")
	builder.WriteString("bbox_south=")
	builder.WriteString(fmt.Sprintf("%v", _m.BboxSouth))
	builder.WriteString(", ")
	builder.WriteString("bbox_north=")
	builder.WriteString(fmt.Sprintf("%v", _m.BboxNorth))
	builder.WriteString(", ")
	builder.WriteString("bbox_west=")
	builder.WriteString(fmt.Sprintf("%v", _m.BboxWest))
	builder.WriteString(", ")
	builder.WriteString("bbox_east=")
	builder.WriteString(fmt.Sprintf("%v", _m.BboxEast))
	builder.WriteString(", ")
	builder.WriteString("icon=")
	builder.WriteString(_m.Icon)
	builder.WriteString(", ")
	builder.WriteString("extratags=")
	builder.WriteString(fmt.Sprintf("%v", _m.Extratags))
	builder.WriteString(", ")
	builder.WriteString("namedetails=")
	builder.WriteString(fmt.Sprintf("%v", _m.Namedetails))
	builder.WriteString(", ")
	builder.WriteString("polygon_geojson=")
	builder.WriteString(_m.PolygonGeojson)
	builder.WriteByte(')')
	return builder.String()
}

// Places is a parsable slice of Place.
type Places []*Place
